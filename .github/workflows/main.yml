# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    runs-on: ubuntu-latest
    container:
      image: ros:noetic-ros-base
      env:
        ROS_DISTRO: noetic

    steps:
    - uses: actions/checkout@v3

    - name: install packages
      run: |
        sudo apt-get -y update
        sudo apt-get -y install build-essential cmake libyaml-cpp-dev libboost-dev zlib1g-dev

    - name: build using top-level cmake project (release, without ROS)
      run: |
        prefix=${GITHUB_WORKSPACE}/fpsdk-toplevel-release-noros
        make install INSTALL_PREFIX=${prefix} BUILD_TYPE=Release
        ${prefix}/bin/fpltool -h

    - name: build using top-level cmake project (debug, without ROS)
      run: |
        prefix=${GITHUB_WORKSPACE}/fpsdk-toplevel-debug-noros
        make install INSTALL_PREFIX=${prefix} BUILD_TYPE=Release
        ${prefix}/bin/fpltool -h

    - name: build individual cmake projects (release, without ROS)
      run: |
        prefix=${GITHUB_WORKSPACE}/fpsdk-projs-release-noros
        cmake -B fplib/build -S fplib -DCMAKE_INSTALL_PREFIX=${prefix} -DCMAKE_BUILD_TYPE=Release
        cmake --build fplib/build
        cmake --install fplib/build
        cmake -B fpapps/build -S fpapps -DCMAKE_INSTALL_PREFIX=${prefix}
        cmake --build fpapps/build
        cmake --install fpapps/build
        ${prefix}/bin/fpltool -h


    - name: build using top-level cmake project (release, without ROS)
      run: |
        prefix=${GITHUB_WORKSPACE}/fpsdk-toplevel-release-withros
        source /opt/${ROS_DISTRO}/setup.bash
        make install INSTALL_PREFIX=${prefix} BUILD_TYPE=Release
        ${prefix}/bin/fpltool -h


#     - name: make ci
#       run: make ci -k
# #    # Make tar of output
# #    - name: tar output
# #      run: tar -czv --owner=0 --group=0 -f output.tar.gz output
#     - name: make libubloxcfg.so
#       run: make libubloxcfg.so
#     - name: Upload output
#       uses: actions/upload-artifact@v2
#       with:
#         name: ubloxcfg-build
#         path: output/*.zip

# eof
