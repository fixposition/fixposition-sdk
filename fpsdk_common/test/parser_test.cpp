/**
 * \verbatim
 * ___    ___
 * \  \  /  /
 *  \  \/  /   Copyright (c) Fixposition AG (www.fixposition.com) and contributors
 *  /  /\  \   License: see the LICENSE file
 * /__/  \__\
 * \endverbatim
 *
 * @file
 * @brief Fixposition SDK: tests for fpsdk::common::parser (Parser)
 */

/* LIBC/STL */
#include <algorithm>
#include <cstdint>
#include <cstring>
#include <string>
#include <vector>

/* EXTERNAL */
#include <gtest/gtest.h>

/* PACKAGE */
#include <fpsdk_common/logging.hpp>
#include <fpsdk_common/parser.hpp>

namespace {
/* ****************************************************************************************************************** */
using namespace fpsdk::common::parser;

#include "data/test_data_fpa.cpp"
#include "data/test_data_fpb.cpp"
#include "data/test_data_mixed.cpp"
#include "data/test_data_nmea.cpp"
#include "data/test_data_novb.cpp"
#include "data/test_data_rtcm3.cpp"
#include "data/test_data_spartn.cpp"
#include "data/test_data_ubx.cpp"

// ---------------------------------------------------------------------------------------------------------------------

class ParserTest : public ::testing::Test
{
   public:
   protected:
    struct ExpectedMsgs
    {
        std::string name_;
        std::vector<uint8_t> data_;
    };

#define _HELP1 "expected_msgs[" << msg_ix << "]"
#define _HELP2 "expected_flush[" << (msg_ix - expected_msgs.size()) << "]"
    bool TestLog(Parser& parser, const std::vector<uint8_t>& log_data, const std::vector<ExpectedMsgs>& expected_msgs,
        const std::vector<ExpectedMsgs>& expected_flush)
    {
        ParserMsg msg;
        bool res = true;
        std::size_t msg_ix = -1;

        // Check all expected messages
        std::size_t log_offs = 0;
        while (log_offs < log_data.size()) {
            uint8_t data[MAX_ANY_SIZE];
            const std::size_t size = std::min(sizeof(data), log_data.size() - log_offs);
            std::memcpy(data, log_data.data() + log_offs, size);
            log_offs += size;
            EXPECT_TRUE(parser.Add(data, size));
            while (parser.Process(msg)) {
                msg_ix++;
                // We're expecting no less and no more
                EXPECT_TRUE(msg_ix < expected_msgs.size()) << _HELP1;
                EXPECT_EQ(msg_ix, msg.seq_ - 1) << _HELP1;
                if (msg_ix < expected_msgs.size()) {
                    // Check name, size and data
                    EXPECT_EQ(std::string(msg.name_), expected_msgs[msg_ix].name_) << _HELP1;
                    EXPECT_EQ(msg.data_, expected_msgs[msg_ix].data_) << _HELP1;
                } else {
                    res = false;
                }
            }
        }
        // Like above, with the remaining data at the end of the log (if there is any)
        while (parser.Flush(msg)) {
            msg_ix++;
            EXPECT_TRUE(msg_ix < (expected_msgs.size() + expected_flush.size())) << _HELP2;
            EXPECT_EQ(msg_ix, msg.seq_ - 1) << _HELP2;
            if (msg_ix < (expected_msgs.size() + expected_flush.size())) {
                EXPECT_EQ(std::string(msg.name_), expected_flush[msg_ix - expected_msgs.size()].name_) << _HELP2;
                EXPECT_EQ(msg.data_, expected_flush[msg_ix - expected_msgs.size()].data_) << _HELP2;
            } else {
                res = false;
            }
        }

        return res;
    }
#undef _HELP1
#undef _HELP2

    void TestDetector(const std::vector<uint8_t>& data)
    {
        Parser parser;
        ParserMsg msg;
        // Not expecting anything from the parser until we have given the whole message
        for (std::size_t ix = 0; ix < (data.size() - 1); ix++) {
            const uint8_t b = data[ix];
            EXPECT_TRUE(parser.Add(&b, 1));
            EXPECT_FALSE(parser.Process(msg));
        }
        // Feed the last byte
        const uint8_t b = data[data.size() - 1];
        EXPECT_TRUE(parser.Add(&b, 1));
        EXPECT_TRUE(parser.Process(msg));
        // And there shouln't be anything more
        EXPECT_FALSE(parser.Flush(msg));
    }

    void TestBadMessage(const std::vector<uint8_t>& data)
    {
        Parser parser;
        ParserMsg msg;
        EXPECT_TRUE(parser.Add(data));
        std::size_t size = 0;
        while (parser.Process(msg)) {
            EXPECT_EQ(std::string(msg.name_), std::string("OTHER"));
            size += msg.data_.size();
        }
        while (parser.Flush(msg)) {
            EXPECT_EQ(std::string(msg.name_), std::string("OTHER"));
            size += msg.data_.size();
        }
        EXPECT_EQ(size, data.size());
    }
};

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, Parser)
{
    Parser parser;
    ParserMsg msg;
    const std::vector<uint8_t> garbage1 = { 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22, 0x11, 0x22 };
    const std::vector<uint8_t> garbage2 = { 0x11, 0xaa, 0x11, 0xaa, 0x11, 0xaa, 0x11, 0xaa, 0x11, 0xaa };
    const std::vector<uint8_t> nmea_gn_rmc = { // clang-format off
        0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c, 0x41,
        0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38, 0x32,
        0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31,
        0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a };  // clang-format on

    // Add a valid message
    parser.Reset();
    EXPECT_TRUE(parser.Add(nmea_gn_rmc));
    // We should get back exactly this message, and nothing more
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, nmea_gn_rmc);
    EXPECT_FALSE(parser.Process(msg));

    // Add some garbage that cannot be mistaken as an incomplete message of some known type
    parser.Reset();
    EXPECT_TRUE(parser.Add(garbage1));
    // We should get back the garbage right away
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, garbage1);

    // Add some garbage that ends with the beginning of a (NOV_B) message
    parser.Reset();
    EXPECT_TRUE(parser.Add(garbage2));
    // Even though it's all garbage, the parser is stuck in WAIT state
    EXPECT_FALSE(parser.Process(msg));
    // Force-flushing it gives us the whole garbage
    EXPECT_TRUE(parser.Flush(msg));
    EXPECT_EQ(msg.data_, garbage2);
    // Similarly, we cann add more garbage to make it pass all data
    EXPECT_TRUE(parser.Add(garbage2));
    EXPECT_FALSE(parser.Process(msg));
    EXPECT_TRUE(parser.Add(garbage1));
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(std::vector<uint8_t>(msg.data_.data(), msg.data_.data() + garbage2.size()), garbage2);
    EXPECT_EQ(
        std::vector<uint8_t>(&msg.data_[garbage2.size()], &msg.data_[garbage2.size()] + garbage1.size()), garbage1);

    // Some garbage and a valid message
    parser.Reset();
    EXPECT_TRUE(parser.Add(garbage1));
    EXPECT_TRUE(parser.Add(nmea_gn_rmc));
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, garbage1);
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, nmea_gn_rmc);

    // Some maybe-a-message-garbage and a valid message
    parser.Reset();
    EXPECT_TRUE(parser.Add(garbage2));
    EXPECT_FALSE(parser.Process(msg));
    EXPECT_TRUE(parser.Add(nmea_gn_rmc));
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, garbage2);
    EXPECT_TRUE(parser.Process(msg));
    EXPECT_EQ(msg.data_, nmea_gn_rmc);

    // Bad arguments
    uint8_t data[] = { 0x55, 0xaa, 0x55, 0xaa };
    EXPECT_FALSE(parser.Add(NULL, 0));
    EXPECT_FALSE(parser.Add(NULL, -1));
    EXPECT_FALSE(parser.Add(data, 0));
    EXPECT_FALSE(parser.Add(data, -1));

    // Overflow
    std::vector<uint8_t> too_large(MAX_ADD_SIZE * 10);
    EXPECT_FALSE(parser.Add(too_large));
    // It should not have taken any of the data
    EXPECT_FALSE(parser.Process(msg));
    EXPECT_FALSE(parser.Flush(msg));
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, FP_B)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_FPB_BIN, {
            { "FP_B-MEASUREMENTS", { 0x66, 0x21, 0xd1, 0x07, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe2, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xe3, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe4, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x26, 0x54, 0xaa, 0x34 } }
        }, {
        }));  // clang-format on

    // Exercise parser detector function
    // clang-format off
    TestDetector({0x66, 0x21, 0xea, 0xfd, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x70, 0x8c, 0xb8});
    TestBadMessage({0x67, 0x21, 0xea, 0xfd, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x70, 0x8c, 0xb8});  // bad sync char
    TestBadMessage({0x66, 0x22, 0xea, 0xfd, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x70, 0x8c, 0xb8});  // bad sync char
    TestBadMessage({0x66, 0x21, 0xea, 0xfd, 0xff, 0xff, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x70, 0x8c, 0xb8});  // too long payload
    TestBadMessage({0x66, 0x21, 0xea, 0xfd, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x70, 0x8c, 0xb9});  // bad crc
    // clang-format on
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, UBX)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_UBX_BIN, {
            { "UBX-TIM-TP",        { 0xb5, 0x62, 0x0d, 0x01, 0x10, 0x00, 0x88, 0xb7, 0x43, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0x08, 0x1b, 0x3f, 0xe2, 0xd2 } },
            { "UBX-MON-HW",        { 0xb5, 0x62, 0x0a, 0x09, 0x3c, 0x00, 0xc1, 0x81, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x4e, 0x66, 0x00, 0x00, 0x4f, 0x00, 0x0d, 0x1a, 0x02, 0x01, 0x01, 0x85, 0xbf, 0xff, 0x01, 0x00, 0x3e, 0x06, 0x07, 0x09, 0x08, 0x10, 0xff, 0x12, 0x13, 0x14, 0x15, 0x0e, 0x0a, 0x0b, 0x0f, 0x44, 0x16, 0x39, 0x0e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x0d } },
            { "UBX-MON-HW2",       { 0xb5, 0x62, 0x0a, 0x0b, 0x1c, 0x00, 0x0c, 0x9e, 0x0c, 0x91, 0x00, 0x8a, 0xa9, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x8e } },
            { "UBX-MON-TEMP",      { 0xb5, 0x62, 0x0a, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x98 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x1b, 0x04, 0x00, 0x0a, 0x52, 0x02, 0x43, 0x93, 0xe6, 0x6d, 0x8b, 0xf8, 0x68, 0xb0, 0x71, 0x84, 0x18, 0x15, 0x64, 0x00, 0xb0, 0xb5, 0x7f, 0xfe, 0xe6, 0x0f, 0x04, 0xc6, 0x60, 0x1d, 0xe8, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0x85, 0xec, 0x1b, 0xcd, 0xe1, 0xb6, 0xe8, 0xba, 0xfc, 0xb6 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x0a, 0x04, 0x00, 0x0a, 0x57, 0x02, 0x43, 0x93, 0xe6, 0x29, 0x8b, 0xf8, 0x68, 0xf2, 0x71, 0x04, 0x7c, 0xf8, 0x65, 0x00, 0x08, 0xf2, 0x7f, 0x7f, 0xf6, 0x0f, 0x05, 0x76, 0x81, 0x2c, 0x80, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0x23, 0x00, 0xfa, 0xcd, 0xa1, 0xb2, 0x58, 0xa2, 0xfa, 0xcf } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x12, 0x04, 0x00, 0x0a, 0x5f, 0x02, 0x43, 0x93, 0xe6, 0x49, 0x8b, 0x78, 0xed, 0xf3, 0x71, 0x6e, 0x91, 0xd0, 0x65, 0x01, 0xc0, 0x6f, 0xff, 0x82, 0xfe, 0x0f, 0xee, 0xe0, 0x7f, 0xfc, 0xcf, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0x99, 0x0a, 0x00, 0xcd, 0xa1, 0xb4, 0x98, 0xb1, 0x8f, 0x4e } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x17, 0x04, 0x00, 0x0a, 0x60, 0x02, 0x43, 0x93, 0xe6, 0x5d, 0x8b, 0x78, 0xe9, 0xb1, 0x71, 0x9a, 0xd4, 0x02, 0x64, 0x01, 0x40, 0x12, 0x00, 0x83, 0xfc, 0x0f, 0xee, 0xef, 0xdf, 0xfd, 0x07, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0x31, 0x0d, 0x00, 0xcd, 0xe1, 0xb5, 0x68, 0xdf, 0xa8, 0x35 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x01, 0x04, 0x00, 0x0a, 0x61, 0x02, 0x43, 0x93, 0xe6, 0x05, 0x8b, 0x78, 0xed, 0xdb, 0x71, 0xb0, 0x16, 0x35, 0x64, 0x00, 0x90, 0xde, 0x7f, 0x7e, 0xfa, 0x0f, 0x0a, 0xfa, 0xe0, 0x1e, 0xa4, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0x46, 0x1b, 0x5d, 0xcd, 0x61, 0xb0, 0x28, 0x15, 0x5e, 0xc4 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x00, 0x08, 0x04, 0x00, 0x0a, 0x63, 0x02, 0x43, 0x93, 0xe6, 0x21, 0x8b, 0x78, 0xec, 0x17, 0x72, 0x63, 0x5c, 0xe2, 0x61, 0x00, 0xd8, 0xef, 0xff, 0x7d, 0xeb, 0x0f, 0x0b, 0xc9, 0x60, 0x16, 0x1c, 0x00, 0xfe, 0x01, 0x1c, 0x02, 0xfc, 0x00, 0x3f, 0xd8, 0xa3, 0xee, 0xcd, 0x21, 0xb2, 0x88, 0x26, 0xc9, 0x59 } },
            { "UBX-RXM-RAWX",      { 0xb5, 0x62, 0x02, 0x15, 0xd0, 0x08, 0xd9, 0xce, 0xf7, 0xd3, 0x58, 0xba, 0x13, 0x41, 0xcd, 0x08, 0x12, 0x46, 0x01, 0x01, 0xf0, 0x75, 0xde, 0x26, 0x6f, 0x09, 0x0d, 0xf3, 0x7b, 0x41, 0x80, 0x83, 0xfb, 0x04, 0x02, 0x5c, 0xa2, 0x41, 0xc2, 0x12, 0x12, 0x45, 0x02, 0x07, 0x00, 0x00, 0xf4, 0xfb, 0x26, 0x04, 0x02, 0x07, 0x07, 0x00, 0x4a, 0xe5, 0x15, 0x3a, 0x9b, 0xbc, 0x77, 0x41, 0x4b, 0x97, 0x61, 0x8c, 0x31, 0x2f, 0x9f, 0x41, 0x84, 0xc0, 0x6c, 0xc5, 0x00, 0x10, 0x00, 0x00, 0xf4, 0xfb, 0x29, 0x04, 0x02, 0x07, 0x0f, 0x00, 0x9d, 0x8f, 0x5e, 0x84, 0x52, 0xbc, 0x7b, 0x41, 0xf8, 0x30, 0x4c, 0xc7, 0x0d, 0x38, 0xa2, 0x41, 0x2a, 0xf0, 0x60, 0xc5, 0x02, 0x15, 0x00, 0x00, 0xf4, 0xfb, 0x26, 0x04, 0x02, 0x07, 0x07, 0x00, 0xa7, 0x4e, 0x91, 0xed, 0xb9, 0xb8, 0x79, 0x41, 0xdd, 0x32, 0xc8, 0xc1, 0x5e, 0xe5, 0xa0, 0x41, 0xcb, 0xa3, 0x22, 0x45, 0x00, 0x20, 0x00, 0x00, 0xf4, 0xfb, 0x27, 0x05, 0x02, 0x07, 0x07, 0x00, 0x59, 0xb3, 0x78, 0x6b, 0x9a, 0x11, 0x7a, 0x41, 0xa5, 0xd4, 0x65, 0xb4, 0xc0, 0x1f, 0xa1, 0x41, 0x89, 0x9f, 0x15, 0xc5, 0x02, 0x0d, 0x00, 0x00, 0xf4, 0xfb, 0x2a, 0x04, 0x02, 0x06, 0x07, 0x00, 0xf0, 0x55, 0x81, 0x36, 0x74, 0x42, 0x78, 0x41, 0xdc, 0x8f, 0x0f, 0xab, 0x0a, 0xdf, 0x9f, 0x41, 0xf0, 0xd3, 0x45, 0xc3, 0x02, 0x1a, 0x00, 0x00, 0xf4, 0xfb, 0x2d, 0x03, 0x01, 0x05, 0x07, 0x00, 0x00, 0xb3, 0x62, 0xe6, 0x30, 0x25, 0x84, 0x41, 0x7a, 0xaa, 0x50, 0x26, 0xb6, 0x39, 0xaa, 0x41, 0x38, 0x70, 0xba, 0xc4, 0x03, 0x0d, 0x00, 0x00, 0xf4, 0xfb, 0x25, 0x05, 0x03, 0x07, 0x07, 0x00, 0x17, 0xed, 0x9c, 0x69, 0xe1, 0x99, 0x84, 0x41, 0xf4, 0x93, 0xc6, 0xd2, 0x9e, 0xd1, 0xaa, 0x41, 0xbe, 0x87, 0xcc, 0xc4, 0x03, 0x08, 0x00, 0x00, 0xf4, 0xfb, 0x20, 0x06, 0x06, 0x08, 0x0f, 0x00, 0x2a, 0x81, 0xd2, 0x2c, 0x46, 0x12, 0x78, 0x41, 0x76, 0x47, 0x56, 0x18, 0x25, 0x56, 0x9f, 0x41, 0x5c, 0x8d, 0xfe, 0x44, 0x03, 0x14, 0x00, 0x00, 0xf4, 0xfb, 0x2d, 0x03, 0x01, 0x06, 0x07, 0x00, 0x6f, 0xba, 0xcb, 0xc3, 0xfb, 0x6d, 0x79, 0x41, 0xc4, 0x07, 0x26, 0x60, 0x66, 0x8d, 0xa0, 0x41, 0xcd, 0x37, 0x0c, 0x45, 0x03, 0x23, 0x00, 0x00, 0xf4, 0xfb, 0x27, 0x04, 0x02, 0x07, 0x07, 0x00, 0x4d, 0x64, 0x4b, 0xe8, 0x5a, 0x8a, 0x78, 0x41, 0x5c, 0xba, 0xeb, 0xce, 0x77, 0xf2, 0x9f, 0x41, 0x5c, 0x28, 0x8c, 0xc4, 0x03, 0x20, 0x00, 0x00, 0xf4, 0xfb, 0x2d, 0x03, 0x01, 0x06, 0x0f, 0x00, 0x6d, 0xbc, 0x48, 0xe6, 0x89, 0x2b, 0x78, 0x41, 0xc6, 0xbb, 0x70, 0xab, 0x08, 0x77, 0x9f, 0x41, 0xfc, 0xc1, 0x1b, 0xc5, 0x03, 0x1e, 0x00, 0x00, 0xf4, 0xfb, 0x2d, 0x03, 0x01, 0x06, 0x07, 0x00, 0xd7, 0x22, 0xa2, 0xb1, 0xeb, 0x84, 0x78, 0x41, 0x53, 0x30, 0xf9, 0xcb, 0xcc, 0x5d, 0xa0, 0x41, 0xb7, 0x75, 0x95, 0xc5, 0x06, 0x0d, 0x00, 0x05, 0xf4, 0xfb, 0x1c, 0x08, 0x06, 0x08, 0x07, 0x00, 0xef, 0x43, 0x21, 0x05, 0x86, 0x5d, 0x77, 0x41, 0xb3, 0x43, 0xd4, 0x04, 0xad, 0x39, 0x9f, 0x41, 0x1c, 0x9b, 0x6e, 0x45, 0x06, 0x01, 0x00, 0x08, 0xf4, 0xfb, 0x26, 0x06, 0x03, 0x07, 0x07, 0x00, 0xca, 0x68, 0x8e, 0xb5, 0x70, 0xba, 0x75, 0x41, 0x10, 0x5e, 0x5b, 0xf0, 0xa8, 0x16, 0x9d, 0x41, 0x44, 0xeb, 0x59, 0x44, 0x06, 0x08, 0x00, 0x0d, 0xf4, 0xfb, 0x2d, 0x05, 0x01, 0x06, 0x07, 0x00, 0xf1, 0x71, 0x8b, 0x44, 0xa0, 0xce, 0x78, 0x41, 0x6d, 0xd2, 0xfa, 0xfc, 0xee, 0x97, 0xa0, 0x41, 0x78, 0xb5, 0x33, 0x45, 0x06, 0x11, 0x00, 0x0b, 0x08, 0x9d, 0x24, 0x06, 0x03, 0x08, 0x07, 0x00, 0xd6, 0x24, 0xe5, 0x9a, 0x02, 0x55, 0x77, 0x41, 0x90, 0xae, 0x11, 0xce, 0x7d, 0x2b, 0x9f, 0x41, 0x24, 0xe5, 0xb2, 0x44, 0x06, 0x0f, 0x00, 0x07, 0xf4, 0xfb, 0x2a, 0x05, 0x02, 0x07, 0x0f, 0x00, 0xab, 0x8e, 0xc3, 0x9a, 0x9f, 0xe8, 0x78, 0x41, 0x91, 0x54, 0x5d, 0xe5, 0xda, 0x9e, 0xa0, 0x41, 0x0d, 0xdf, 0x66, 0xc5, 0x06, 0x16, 0x00, 0x04, 0xf4, 0xfb, 0x27, 0x06, 0x02, 0x07, 0x07, 0x00, 0x35, 0x98, 0xbb, 0x15, 0x9a, 0x2e, 0x83, 0x41, 0x82, 0x14, 0xcb, 0xd3, 0x58, 0x33, 0xa9, 0x41, 0x78, 0xe2, 0xd3, 0xc3, 0x01, 0x88, 0x00, 0x00, 0xf4, 0xfb, 0x29, 0x04, 0x02, 0x07, 0x0f, 0x00, 0x7a, 0x99, 0x39, 0x06, 0x80, 0xef, 0x75, 0x41, 0x74, 0xa3, 0x81, 0xc3, 0x6b, 0xd1, 0x9c, 0x41, 0x3c, 0x3b, 0x17, 0xc4, 0x00, 0x0a, 0x00, 0x00, 0xf4, 0xfb, 0x31, 0x03, 0x01, 0x05, 0x0f, 0x00, 0xe9, 0xb9, 0x44, 0x1e, 0x05, 0xe4, 0x83, 0x41, 0xc6, 0x4a, 0x46, 0xb6, 0xaf, 0x21, 0xaa, 0x41, 0xe8, 0x7c, 0xcf, 0xc3, 0x01, 0x7f, 0x00, 0x00, 0x50, 0xdc, 0x1f, 0x06, 0x05, 0x08, 0x0f, 0x00, 0x72, 0xd9, 0xbb, 0xf9, 0xad, 0x5c, 0x83, 0x41, 0x00, 0x2d, 0xee, 0xc6, 0xe1, 0x6f, 0xa9, 0x41, 0x10, 0xd9, 0xd4, 0xc3, 0x01, 0x7b, 0x00, 0x00, 0xf4, 0xfb, 0x27, 0x04, 0x02, 0x07, 0x0f, 0x00, 0x7a, 0xd2, 0x24, 0xc9, 0xfe, 0x3a, 0x77, 0x41, 0x77, 0x3d, 0x2d, 0x9d, 0xeb, 0x84, 0x9e, 0x41, 0x7b, 0x39, 0x31, 0xc5, 0x00, 0x17, 0x00, 0x00, 0xf4, 0xfb, 0x2c, 0x03, 0x01, 0x06, 0x07, 0x00, 0xcc, 0x1f, 0x95, 0x0c, 0xd2, 0xa6, 0x76, 0x41, 0x50, 0x45, 0x5c, 0xa2, 0xff, 0x7c, 0x9d, 0x41, 0xf1, 0x18, 0x59, 0x43, 0x03, 0x1d, 0x00, 0x00, 0xf4, 0xfb, 0x2f, 0x03, 0x01, 0x05, 0x07, 0x00, 0x09, 0x8f, 0xf1, 0xe4, 0xb0, 0x04, 0x7a, 0x41, 0xee, 0x99, 0x1c, 0xa6, 0x7e, 0xef, 0xa0, 0x41, 0x76, 0xb6, 0x39, 0xc5, 0x03, 0x2d, 0x00, 0x00, 0xf4, 0xfb, 0x28, 0x04, 0x02, 0x07, 0x07, 0x00, 0x27, 0x7e, 0xe9, 0x03, 0x6a, 0x15, 0x77, 0x41, 0x4d, 0x3a, 0x89, 0xf3, 0x64, 0xe4, 0x9e, 0x41, 0xcf, 0xd2, 0x2b, 0xc5, 0x06, 0x07, 0x00, 0x0c, 0xf4, 0xfb, 0x2b, 0x05, 0x01, 0x06, 0x0f, 0x00, 0xe0, 0x1d, 0xa4, 0x15, 0xb7, 0x16, 0x75, 0x41, 0x24, 0x4b, 0x28, 0x2c, 0xde, 0x33, 0x9c, 0x41, 0x83, 0xa2, 0xdc, 0xc4, 0x06, 0x17, 0x00, 0x0a, 0xf4, 0xfb, 0x2b, 0x05, 0x01, 0x06, 0x07, 0x00, 0x96, 0xb8, 0x46, 0xfd, 0xd0, 0x4c, 0x76, 0x41, 0x14, 0x0c, 0xb3, 0xab, 0xce, 0xb7, 0x9d, 0x41, 0xc1, 0xfa, 0x10, 0xc5, 0x06, 0x0e, 0x00, 0x00, 0xf4, 0xfb, 0x2a, 0x05, 0x01, 0x06, 0x0f, 0x00, 0xcd, 0x5d, 0xd7, 0xd5, 0xa3, 0x37, 0x75, 0x41, 0xc6, 0xc6, 0x3f, 0xe1, 0x5c, 0x5d, 0x9c, 0x41, 0x92, 0x12, 0xa3, 0x44, 0x06, 0x18, 0x00, 0x09, 0xf4, 0xfb, 0x2e, 0x05, 0x01, 0x06, 0x07, 0x00, 0xf4, 0xd2, 0x9b, 0xd9, 0x47, 0xc7, 0x7a, 0x41, 0x34, 0x4d, 0x20, 0xc6, 0x19, 0x97, 0xa1, 0x41, 0xd8, 0xd2, 0xce, 0x44, 0x02, 0x21, 0x00, 0x00, 0xf4, 0xfb, 0x28, 0x04, 0x02, 0x07, 0x07, 0x00, 0x1b, 0xa7, 0x9f, 0xc5, 0xdb, 0x5e, 0x7a, 0x41, 0xa6, 0x2c, 0xa8, 0xf8, 0x7f, 0x52, 0xa1, 0x41, 0x7f, 0x01, 0x71, 0xc4, 0x00, 0x1e, 0x00, 0x00, 0xf4, 0xfb, 0x26, 0x05, 0x02, 0x07, 0x0f, 0x00, 0xa5, 0x3b, 0x59, 0x8c, 0xad, 0x52, 0x77, 0x41, 0xca, 0xbb, 0xae, 0x1c, 0x0a, 0xa4, 0x9e, 0x41, 0xb8, 0x8d, 0xdc, 0x44, 0x00, 0x15, 0x00, 0x00, 0xf4, 0xfb, 0x2b, 0x04, 0x02, 0x06, 0x0f, 0x00, 0xcf, 0x1e, 0x77, 0x4f, 0xdf, 0x03, 0x7d, 0x41, 0xf3, 0xc0, 0x3d, 0xdd, 0x37, 0x0f, 0xa3, 0x41, 0xd4, 0xe7, 0xd6, 0xc4, 0x02, 0x03, 0x00, 0x00, 0xf4, 0xfb, 0x25, 0x04, 0x02, 0x07, 0x07, 0x00, 0x43, 0xeb, 0xfe, 0xec, 0x08, 0x7c, 0x79, 0x41, 0xfc, 0x61, 0xaf, 0x2a, 0x81, 0xbd, 0xa0, 0x41, 0x29, 0xbc, 0x01, 0xc5, 0x02, 0x01, 0x00, 0x00, 0xf4, 0xfb, 0x2c, 0x04, 0x01, 0x06, 0x07, 0x00, 0x59, 0x73, 0xb7, 0x5d, 0x17, 0xc9, 0x75, 0x41, 0xc6, 0x75, 0xe1, 0x8d, 0xf5, 0x9e, 0x9c, 0x41, 0x40, 0x20, 0x7e, 0x44, 0x00, 0x08, 0x00, 0x00, 0xf4, 0xfb, 0x2e, 0x03, 0x01, 0x05, 0x07, 0x00, 0xf4, 0x9c, 0xfc, 0xcb, 0x7b, 0x9d, 0x79, 0x41, 0xd3, 0xb3, 0x6c, 0xb1, 0x79, 0xd3, 0xa0, 0x41, 0x39, 0x9c, 0x63, 0xc5, 0x00, 0x12, 0x00, 0x00, 0xf4, 0xfb, 0x29, 0x04, 0x02, 0x07, 0x0f, 0x00, 0xb5, 0x6e, 0x7b, 0x6b, 0x6f, 0x46, 0x75, 0x41, 0x7d, 0xa1, 0xc4, 0xe7, 0x4d, 0xf3, 0x9b, 0x41, 0xae, 0xc0, 0xa0, 0xc4, 0x00, 0x1b, 0x00, 0x00, 0xf4, 0xfb, 0x2f, 0x03, 0x01, 0x05, 0x0f, 0x00, 0x46, 0xef, 0x15, 0xd0, 0x09, 0x89, 0x79, 0x41, 0xa7, 0x2b, 0xc7, 0x0d, 0x0c, 0xc6, 0xa0, 0x41, 0x70, 0xec, 0x3d, 0x45, 0x00, 0x01, 0x00, 0x00, 0xf4, 0xfb, 0x27, 0x05, 0x02, 0x07, 0x0f, 0x00, 0x83, 0x06, 0x3b, 0xe3, 0xd9, 0x0f, 0x7a, 0x41, 0x36, 0x6e, 0x47, 0x03, 0x9a, 0x1e, 0xa1, 0x41, 0x02, 0x93, 0x08, 0xc5, 0x00, 0x07, 0x00, 0x00, 0xf4, 0xfb, 0x1a, 0x06, 0x07, 0x08, 0x07, 0x00, 0x52, 0xda, 0x74, 0xb9, 0x41, 0xd2, 0x7a, 0x41, 0x0c, 0x02, 0x6d, 0xea, 0x4d, 0x9e, 0xa1, 0x41, 0x80, 0x4b, 0x63, 0x44, 0x02, 0x1f, 0x00, 0x00, 0xf4, 0xfb, 0x2a, 0x04, 0x01, 0x06, 0x07, 0x00, 0x74, 0x88, 0x81, 0x91, 0xfe, 0x4d, 0x7b, 0x41, 0x7f, 0x89, 0x52, 0x79, 0x95, 0xef, 0xa1, 0x41, 0x74, 0x9f, 0x0b, 0x44, 0x02, 0x08, 0x00, 0x00, 0xf4, 0xfb, 0x29, 0x04, 0x02, 0x06, 0x07, 0x00, 0x1f, 0xda, 0xb6, 0x4d, 0x74, 0x42, 0x78, 0x41, 0xa8, 0x84, 0x0d, 0x3f, 0xbc, 0x6b, 0x98, 0x41, 0x80, 0x90, 0x17, 0xc3, 0x02, 0x1a, 0x06, 0x00, 0xf4, 0xfb, 0x31, 0x03, 0x01, 0x04, 0x07, 0x00, 0xaf, 0x44, 0xd3, 0xb2, 0x9a, 0x11, 0x7a, 0x41, 0xda, 0x48, 0xef, 0x97, 0xf5, 0x3d, 0x9a, 0x41, 0x96, 0x4b, 0xe5, 0xc4, 0x02, 0x0d, 0x06, 0x00, 0xf4, 0xfb, 0x30, 0x03, 0x01, 0x04, 0x07, 0x00, 0x47, 0x19, 0x48, 0xec, 0x52, 0xbc, 0x7b, 0x41, 0x6a, 0x5f, 0xc5, 0xac, 0x82, 0xeb, 0x9b, 0x41, 0x30, 0x58, 0x2c, 0xc5, 0x02, 0x15, 0x06, 0x00, 0xf4, 0xfb, 0x29, 0x03, 0x02, 0x06, 0x07, 0x00, 0x3b, 0xa1, 0xe2, 0x21, 0x09, 0x7c, 0x79, 0x41, 0xf3, 0x2f, 0xce, 0xbf, 0x65, 0xa7, 0x99, 0x41, 0x72, 0xc8, 0xc6, 0xc4, 0x02, 0x01, 0x06, 0x00, 0xf4, 0xfb, 0x2f, 0x03, 0x01, 0x05, 0x07, 0x00, 0x17, 0xbc, 0xab, 0x35, 0xe1, 0x99, 0x84, 0x41, 0xf2, 0x60, 0x0c, 0x8b, 0xee, 0xbc, 0xa4, 0x41, 0xc8, 0x1e, 0x9e, 0xc4, 0x03, 0x08, 0x02, 0x00, 0xf4, 0xfb, 0x24, 0x04, 0x03, 0x07, 0x07, 0x00, 0xf6, 0x74, 0xa8, 0x71, 0x0d, 0xf3, 0x7b, 0x41, 0x44, 0x2f, 0xc1, 0x72, 0x9c, 0x22, 0x9c, 0x41, 0xc8, 0xd3, 0xdf, 0x44, 0x02, 0x07, 0x06, 0x00, 0xf4, 0xfb, 0x2a, 0x03, 0x02, 0x06, 0x07, 0x00, 0xd0, 0x5d, 0x47, 0xf7, 0x30, 0x25, 0x84, 0x41, 0xc9, 0xac, 0x40, 0xb2, 0x77, 0x47, 0xa4, 0x41, 0xb2, 0x27, 0x90, 0xc4, 0x03, 0x0d, 0x02, 0x00, 0xf4, 0xfb, 0x28, 0x04, 0x02, 0x07, 0x07, 0x00, 0x40, 0xaf, 0xd5, 0x9b, 0xdf, 0x03, 0x7d, 0x41, 0x73, 0x4f, 0x2e, 0x9b, 0x3e, 0x35, 0x9d, 0x41, 0x9f, 0xb4, 0xa4, 0xc4, 0x02, 0x03, 0x06, 0x00, 0xf4, 0xfb, 0x27, 0x03, 0x02, 0x07, 0x07, 0x00, 0x1a, 0x97, 0x37, 0x17, 0x48, 0xc7, 0x7a, 0x41, 0x30, 0xdb, 0x48, 0xc8, 0xdb, 0xf4, 0x9a, 0x41, 0x12, 0x7a, 0x9e, 0x44, 0x02, 0x21, 0x06, 0x00, 0xf4, 0xfb, 0x2f, 0x03, 0x01, 0x05, 0x07, 0x00, 0xa4, 0xfd, 0xb6, 0x0b, 0x42, 0xd2, 0x7a, 0x41, 0x2e, 0xdd, 0xe9, 0x8e, 0xe5, 0xff, 0x9a, 0x41, 0x64, 0x33, 0x2e, 0x44, 0x02, 0x1f, 0x06, 0x00, 0xf4, 0xfb, 0x2e, 0x03, 0x01, 0x05, 0x07, 0x00, 0xca, 0x06, 0x7e, 0xb3, 0xfe, 0x4d, 0x7b, 0x41, 0x9e, 0xbe, 0x0f, 0x6c, 0x75, 0x7c, 0x9b, 0x41, 0x78, 0x01, 0xd6, 0x43, 0x02, 0x08, 0x06, 0x00, 0xf4, 0xfb, 0x2a, 0x03, 0x02, 0x06, 0x07, 0x00, 0x23, 0x73, 0xeb, 0x5e, 0x6f, 0x46, 0x75, 0x41, 0x5f, 0xc8, 0x2f, 0x21, 0x90, 0xc7, 0x95, 0x41, 0x11, 0x83, 0x7a, 0xc4, 0x00, 0x1b, 0x03, 0x00, 0xf4, 0xfb, 0x2b, 0x04, 0x01, 0x06, 0x07, 0x00, 0x42, 0x05, 0xea, 0x24, 0x33, 0x3f, 0x7a, 0x41, 0xd1, 0xc6, 0x57, 0xfb, 0x7f, 0xde, 0x9a, 0x41, 0x9f, 0x7f, 0x46, 0xc5, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x09, 0x0f, 0x0c, 0x01, 0x00, 0xe0, 0x2f, 0xe6, 0x2a, 0xba, 0xb8, 0x79, 0x41, 0x85, 0xd0, 0x08, 0x34, 0xdb, 0x54, 0x9a, 0x41, 0x21, 0x7e, 0xfd, 0x44, 0x00, 0x20, 0x03, 0x00, 0xf4, 0xfb, 0x24, 0x05, 0x03, 0x08, 0x07, 0x00, 0x01, 0xb5, 0xac, 0xf7, 0x7f, 0xef, 0x75, 0x41, 0x02, 0x5c, 0xbe, 0xb5, 0xa4, 0x74, 0x96, 0x41, 0xb8, 0x97, 0xeb, 0xc3, 0x00, 0x0a, 0x03, 0x00, 0xf4, 0xfb, 0x2b, 0x04, 0x01, 0x06, 0x07, 0x00, 0x4c, 0xd8, 0x34, 0xe1, 0x9f, 0xe8, 0x78, 0x41, 0x66, 0xa1, 0xa6, 0xf8, 0xa8, 0xda, 0x99, 0x41, 0x7e, 0x8c, 0x33, 0xc5, 0x06, 0x16, 0x02, 0x04, 0xf4, 0xfb, 0x27, 0x06, 0x02, 0x07, 0x07, 0x00, 0x25, 0xf5, 0xcf, 0x47, 0xd1, 0x4c, 0x76, 0x41, 0x22, 0xc4, 0x12, 0xd0, 0x2d, 0x1d, 0x97, 0x41, 0x6a, 0x81, 0xe1, 0xc4, 0x06, 0x0e, 0x02, 0x00, 0xf4, 0xfb, 0x2a, 0x05, 0x01, 0x06, 0x0f, 0x00, 0x9d, 0x7e, 0xc9, 0x85, 0x86, 0x5d, 0x77, 0x41, 0x64, 0x0f, 0x99, 0x84, 0x4f, 0x49, 0x98, 0x41, 0xee, 0x8e, 0x39, 0x45, 0x06, 0x01, 0x02, 0x08, 0xf4, 0xfb, 0x22, 0x06, 0x04, 0x08, 0x07, 0x00, 0x75, 0x62, 0xb4, 0xdd, 0x02, 0x55, 0x77, 0x41, 0x3b, 0xc0, 0x85, 0xbb, 0x45, 0x3e, 0x98, 0x41, 0x3e, 0x28, 0x8b, 0x44, 0x06, 0x0f, 0x02, 0x07, 0xf4, 0xfb, 0x29, 0x05, 0x02, 0x07, 0x07, 0x00, 0x7d, 0x7a, 0x3e, 0xfa, 0xdb, 0x5e, 0x7a, 0x41, 0x64, 0x49, 0x93, 0x4d, 0xe9, 0xfe, 0x9a, 0x41, 0xf0, 0x04, 0x3c, 0xc4, 0x00, 0x1e, 0x03, 0x00, 0xf4, 0xfb, 0x20, 0x06, 0x05, 0x08, 0x0f, 0x00, 0x23, 0x8e, 0x44, 0xb8, 0x7b, 0x9d, 0x79, 0x41, 0xfe, 0xc4, 0xed, 0x80, 0xf2, 0x38, 0x9a, 0x41, 0x5c, 0x58, 0x31, 0xc5, 0x00, 0x12, 0x03, 0x00, 0xf4, 0xfb, 0x24, 0x05, 0x03, 0x08, 0x0f, 0x00, 0xf2, 0xd8, 0x32, 0xaf, 0xfe, 0x3a, 0x77, 0x41, 0x85, 0x0a, 0xa8, 0x63, 0xfd, 0xc7, 0x97, 0x41, 0x3f, 0x18, 0x0a, 0xc5, 0x00, 0x17, 0x03, 0x00, 0xf4, 0xfb, 0x2a, 0x04, 0x01, 0x06, 0x07, 0x00, 0x31, 0xa1, 0xe3, 0x42, 0x0a, 0x89, 0x79, 0x41, 0xb4, 0x05, 0x14, 0xf4, 0x05, 0x24, 0x9a, 0x41, 0x66, 0x09, 0x14, 0x45, 0x00, 0x01, 0x03, 0x00, 0xf4, 0xfb, 0x24, 0x05, 0x04, 0x08, 0x07, 0x00, 0xdc, 0x4b, 0xf4, 0x75, 0xd9, 0x0f, 0x7a, 0x41, 0x50, 0x59, 0x53, 0xec, 0x06, 0xae, 0x9a, 0x41, 0x2c, 0x6b, 0xd4, 0xc4, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00, 0x16, 0x09, 0x0f, 0x0c, 0x01, 0x00, 0xcb, 0xa6, 0x17, 0x6d, 0x17, 0xc9, 0x75, 0x41, 0xd7, 0x2c, 0x19, 0xd3, 0x50, 0x4d, 0x96, 0x41, 0xd4, 0x0a, 0x46, 0x44, 0x00, 0x08, 0x03, 0x00, 0xf4, 0xfb, 0x2c, 0x04, 0x01, 0x06, 0x07, 0x00, 0x89, 0x46, 0xe8, 0x41, 0xec, 0x84, 0x78, 0x41, 0xb7, 0x12, 0xf9, 0xca, 0x76, 0x75, 0x99, 0x41, 0x0e, 0x77, 0x68, 0xc5, 0x06, 0x0d, 0x02, 0x05, 0xf4, 0xfb, 0x20, 0x07, 0x05, 0x08, 0x0f, 0x00, 0x73, 0x17, 0xf9, 0xba, 0x70, 0xba, 0x75, 0x41, 0x5d, 0xbb, 0x16, 0xe9, 0xda, 0x9f, 0x96, 0x41, 0xb9, 0x88, 0x29, 0x44, 0x06, 0x08, 0x02, 0x0d, 0xf4, 0xfb, 0x2a, 0x05, 0x02, 0x06, 0x07, 0x00, 0x74, 0xce, 0xda, 0xef, 0xa3, 0x37, 0x75, 0x41, 0x37, 0xbf, 0xfc, 0xb2, 0xbe, 0x0f, 0x96, 0x41, 0x2f, 0xb3, 0x7d, 0x44, 0x06, 0x18, 0x02, 0x09, 0xf4, 0xfb, 0x2c, 0x05, 0x01, 0x06, 0x07, 0x00, 0xc1, 0x45, 0x47, 0x27, 0x6a, 0x15, 0x77, 0x41, 0x47, 0xdb, 0xa1, 0x7a, 0xf7, 0x06, 0x98, 0x41, 0xf1, 0xa9, 0x05, 0xc5, 0x06, 0x07, 0x02, 0x0c, 0xf4, 0xfb, 0x27, 0x06, 0x02, 0x07, 0x07, 0x00, 0xa4, 0x8a } },
            { "UBX-MON-MSGPP",     { 0xb5, 0x62, 0x0a, 0x06, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x47, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xca } },
            { "UBX-MON-COMMS",     { 0xb5, 0x62, 0x0a, 0x36, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05, 0x06, 0x00, 0x02, 0x00, 0x00, 0x32, 0x83, 0x0b, 0x05, 0x05, 0x0b, 0x00, 0x00, 0x19, 0x1c, 0xf2, 0x14, 0x06, 0x15, 0x00, 0x00, 0x24, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0x07, 0x2b, 0x96, 0x0e, 0x0b, 0x37, 0x00, 0x00, 0x02, 0xc3, 0x67, 0x00, 0x06, 0x10, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xa4, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x47, 0x06, 0x00, 0x01, 0x01, 0x00, 0x00, 0x1c, 0xed, 0xf1, 0x14, 0x08, 0x0a, 0x00, 0x00, 0x16, 0x3d, 0x02, 0x05, 0x06, 0x12, 0x00, 0x00, 0x69, 0x4f, 0x00, 0x00, 0xa4, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xcf } },
            { "UBX-MON-HW3",       { 0xb5, 0x62, 0x0a, 0x37, 0xe2, 0x00, 0x00, 0x22, 0x01, 0x30, 0x30, 0x31, 0x39, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x03, 0x0e, 0x5a, 0x0e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x08, 0x3e, 0x00, 0x00, 0x01, 0x64, 0x08, 0x06, 0x00, 0x00, 0x02, 0x44, 0x08, 0x07, 0x00, 0x00, 0x03, 0x64, 0x08, 0x09, 0x00, 0x00, 0x04, 0x44, 0x08, 0x08, 0x00, 0x00, 0x05, 0x40, 0x08, 0x10, 0x00, 0x00, 0x06, 0x21, 0x09, 0xff, 0x00, 0x00, 0x07, 0x41, 0x09, 0x12, 0x00, 0x00, 0x08, 0x41, 0x09, 0x13, 0x00, 0x00, 0x09, 0x60, 0x09, 0x14, 0x00, 0x00, 0x0a, 0x60, 0x08, 0x15, 0x00, 0x00, 0x0b, 0x40, 0x09, 0x0e, 0x00, 0x00, 0x0c, 0x40, 0x09, 0x0a, 0x00, 0x00, 0x0d, 0x60, 0x09, 0x0b, 0x00, 0x00, 0x0e, 0x60, 0x09, 0x0f, 0x00, 0x00, 0x0f, 0x51, 0x08, 0x44, 0x00, 0x00, 0x10, 0x44, 0x08, 0x16, 0x00, 0x01, 0x00, 0x21, 0x09, 0xff, 0x00, 0x01, 0x01, 0x60, 0x09, 0x00, 0x00, 0x01, 0x02, 0x60, 0x08, 0x01, 0x00, 0x01, 0x03, 0x21, 0x09, 0xff, 0x00, 0x01, 0x04, 0x51, 0x08, 0x46, 0x00, 0x01, 0x05, 0x21, 0x09, 0xff, 0x00, 0x01, 0x06, 0x21, 0x09, 0xff, 0x00, 0x01, 0x07, 0x41, 0x09, 0x12, 0x00, 0x01, 0x08, 0x61, 0x09, 0x13, 0x00, 0x01, 0x09, 0x60, 0x09, 0x14, 0x00, 0x01, 0x0a, 0x60, 0x08, 0x15, 0x00, 0x01, 0x0b, 0x21, 0x09, 0xff, 0x00, 0x01, 0x0c, 0x21, 0x09, 0xff, 0x00, 0x01, 0x0d, 0x21, 0x09, 0xff, 0x00, 0x01, 0x0e, 0x61, 0x09, 0x34, 0x00, 0x01, 0x0f, 0xe1, 0x09, 0x36, 0x00, 0x01, 0x10, 0x51, 0x08, 0x35, 0x00, 0x51, 0x82 } },
            { "UBX-MON-RF",        { 0xb5, 0x62, 0x0a, 0x38, 0x34, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x0d, 0x1a, 0x2a, 0x0d, 0x9f, 0x07, 0x92, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x0d, 0x1a, 0x23, 0x0f, 0x9f, 0x06, 0x9c, 0x00, 0x00, 0x00, 0x31, 0x79 } },
            { "UBX-MON-SPAN",      { 0xb5, 0x62, 0x0a, 0x31, 0x24, 0x02, 0x00, 0x02, 0x00, 0x00, 0x48, 0x45, 0x43, 0x45, 0x47, 0x45, 0x45, 0x45, 0x47, 0x44, 0x48, 0x46, 0x48, 0x48, 0x47, 0x49, 0x48, 0x49, 0x49, 0x4a, 0x4c, 0x4d, 0x4d, 0x50, 0x4f, 0x4f, 0x50, 0x4f, 0x54, 0x53, 0x58, 0x66, 0xa7, 0x6c, 0x66, 0x57, 0x55, 0x58, 0x57, 0x5a, 0x53, 0x58, 0x58, 0x57, 0x57, 0x55, 0x5a, 0x5c, 0x5c, 0x63, 0x61, 0x64, 0x64, 0x63, 0x66, 0x69, 0x69, 0x66, 0x68, 0x6c, 0x6d, 0x6c, 0x6d, 0x6f, 0x77, 0x7a, 0x78, 0x78, 0x77, 0x79, 0x79, 0x7c, 0x7e, 0x7e, 0x7f, 0x80, 0x82, 0x82, 0x85, 0x88, 0x88, 0x8a, 0x89, 0x88, 0x86, 0x86, 0x87, 0x85, 0x86, 0x85, 0x93, 0x87, 0x86, 0x84, 0x85, 0x86, 0x9c, 0x86, 0x87, 0x85, 0x85, 0x84, 0x82, 0x83, 0x83, 0x84, 0x84, 0x84, 0x85, 0x8c, 0x90, 0x8d, 0x8d, 0x8c, 0x88, 0x87, 0x88, 0x89, 0x89, 0x8a, 0x8a, 0x92, 0x8c, 0x8d, 0x91, 0x90, 0x91, 0x98, 0x94, 0x92, 0x91, 0x92, 0x92, 0xb4, 0x95, 0x90, 0x8e, 0x8e, 0x8f, 0x8d, 0x8f, 0x8d, 0x8e, 0x8b, 0x8d, 0x88, 0x89, 0x88, 0x86, 0x86, 0x84, 0x85, 0x85, 0x81, 0x81, 0x83, 0x82, 0x84, 0x84, 0x87, 0xb4, 0x8b, 0x85, 0x84, 0x85, 0x84, 0x85, 0x85, 0x86, 0x88, 0x8a, 0x87, 0x86, 0x86, 0x86, 0x86, 0x88, 0x87, 0x83, 0x83, 0x82, 0x81, 0x7f, 0x7f, 0x7d, 0x7c, 0x7b, 0x78, 0x76, 0x75, 0x7b, 0x71, 0x71, 0x6c, 0x6a, 0x69, 0x66, 0x64, 0x63, 0x61, 0x62, 0x60, 0x60, 0x5e, 0x5d, 0x5d, 0x5a, 0x5a, 0x59, 0x59, 0x67, 0x57, 0x55, 0x54, 0x55, 0x54, 0x54, 0x53, 0x51, 0x4f, 0x57, 0x51, 0x5b, 0x4e, 0x54, 0x4e, 0x4b, 0x4b, 0x4a, 0x4c, 0x4a, 0x4b, 0x53, 0x4c, 0x49, 0x48, 0x48, 0x47, 0x48, 0x47, 0x46, 0x46, 0x45, 0x47, 0x46, 0x45, 0x44, 0x45, 0x44, 0x4d, 0x45, 0x46, 0x45, 0x45, 0x46, 0x46, 0x00, 0x20, 0xa1, 0x07, 0x20, 0xa1, 0x07, 0x00, 0x82, 0xb3, 0x61, 0x5e, 0x39, 0x00, 0x00, 0x00, 0x47, 0x48, 0x46, 0x48, 0x47, 0x46, 0x48, 0x48, 0x49, 0x48, 0x48, 0x49, 0x4a, 0x4a, 0x4a, 0x4d, 0x4b, 0x4c, 0x4b, 0x4c, 0x52, 0x4e, 0x4c, 0x4e, 0x50, 0x50, 0x4f, 0x53, 0x58, 0x57, 0x58, 0x54, 0x57, 0x5a, 0x59, 0x59, 0x5a, 0x5d, 0x5c, 0x5e, 0x60, 0x63, 0x63, 0x62, 0x63, 0x64, 0x65, 0x69, 0x68, 0x69, 0x6b, 0x6d, 0x6f, 0x72, 0x73, 0x76, 0x76, 0x79, 0x7c, 0x96, 0x7e, 0x7e, 0x80, 0x82, 0x84, 0x85, 0x85, 0x88, 0x89, 0x88, 0x89, 0x8c, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x8b, 0x8e, 0xb1, 0x8d, 0x8d, 0x8c, 0x8c, 0x8c, 0x8a, 0x8c, 0x8e, 0x8c, 0x8b, 0x8d, 0x8e, 0x8e, 0x8d, 0x8c, 0x8f, 0x8e, 0x8d, 0x8b, 0x8b, 0x8c, 0x8c, 0x8b, 0x8c, 0x8c, 0x8b, 0x8d, 0x8d, 0x8b, 0x89, 0x89, 0x91, 0x8b, 0x8c, 0x8d, 0x8e, 0x8d, 0x8e, 0x8e, 0x8d, 0x8e, 0x8e, 0x8e, 0x8f, 0x90, 0x91, 0x94, 0xa4, 0x93, 0x92, 0x91, 0x8d, 0x8e, 0x8f, 0x91, 0x8e, 0x8d, 0x8d, 0x8d, 0x8c, 0x8c, 0x8d, 0x8c, 0x8c, 0x8a, 0x8b, 0x8a, 0x89, 0x89, 0x8b, 0x89, 0x88, 0x89, 0x89, 0x88, 0x89, 0x89, 0x89, 0xa3, 0x89, 0x89, 0x8a, 0x89, 0x89, 0x89, 0x89, 0x88, 0x89, 0x8b, 0x8b, 0x8a, 0x8a, 0x8b, 0x8c, 0x8b, 0x8e, 0x8b, 0x8a, 0x8c, 0x90, 0x8b, 0x8a, 0x89, 0x8a, 0x89, 0x88, 0x88, 0x86, 0x85, 0x85, 0x83, 0x81, 0x7e, 0x7d, 0x7b, 0x7a, 0x76, 0x75, 0x73, 0x70, 0x6f, 0x6e, 0x6a, 0x6a, 0x68, 0x68, 0x65, 0x63, 0x62, 0x5f, 0x5e, 0x5d, 0x5b, 0x59, 0x59, 0x59, 0x56, 0x55, 0x56, 0x53, 0x53, 0x50, 0x51, 0x50, 0x50, 0x51, 0x56, 0x4e, 0x4c, 0x4c, 0x4d, 0x4b, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x49, 0x4a, 0x68, 0x4a, 0x48, 0x48, 0x4a, 0x48, 0x48, 0x47, 0x48, 0x47, 0x47, 0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x00, 0x20, 0xa1, 0x07, 0x20, 0xa1, 0x07, 0x00, 0x6a, 0xda, 0xf4, 0x48, 0x39, 0x00, 0x00, 0x00, 0xe6, 0x81 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x0a, 0x18, 0x02, 0x00, 0xe4, 0x34, 0x90, 0x38, 0xf6, 0xe3, 0x08, 0x3a, 0xf6, 0x65, 0x4e, 0x24, 0x1e, 0x80, 0x28, 0x17, 0xc9, 0xfd, 0x77, 0x03, 0x4d, 0x00, 0x6a, 0x26, 0x49, 0xa2, 0x9f, 0x05, 0x78, 0xef, 0x44, 0x0f, 0x0b, 0x41, 0xf9, 0x02, 0xe2, 0x2c, 0xd9, 0x3c, 0xfe, 0x19 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x03, 0x14, 0x00, 0x00, 0x0a, 0x08, 0x02, 0x00, 0xe4, 0x34, 0x90, 0x38, 0xf6, 0xe3, 0x08, 0x3a, 0xfa, 0x3b, 0x4f, 0x24, 0x44, 0x00, 0x0e, 0x02, 0x89, 0xfd, 0xb7, 0x02, 0xdb, 0xff, 0xd1, 0x2f, 0x8a, 0x9b, 0x81, 0x36, 0x31, 0x80, 0x11, 0x1a, 0xac, 0x0c, 0xe7, 0x3f, 0x44, 0xe4, 0x07, 0x05, 0x4a, 0x83 } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x03, 0x1e, 0x00, 0x00, 0x0a, 0x0b, 0x02, 0x00, 0xe4, 0x34, 0x90, 0x38, 0xf6, 0xe3, 0x08, 0x3a, 0xf5, 0x64, 0x4e, 0x24, 0xb3, 0x7f, 0x4c, 0x14, 0x99, 0xfd, 0x47, 0x3e, 0x99, 0x00, 0x94, 0x27, 0x73, 0xce, 0xbf, 0x0d, 0x74, 0x97, 0x45, 0x0f, 0x7b, 0x90, 0x70, 0x3b, 0x1f, 0xde, 0xa3, 0x19, 0x1f, 0x0d } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x03, 0x20, 0x00, 0x00, 0x0a, 0x0a, 0x02, 0x00, 0xe4, 0x34, 0x90, 0x38, 0xf6, 0xe3, 0x08, 0x3a, 0xf1, 0x20, 0x4f, 0x24, 0x1e, 0x80, 0x58, 0x2e, 0xa9, 0xfd, 0x9f, 0x01, 0xb0, 0x00, 0x80, 0x31, 0x77, 0x91, 0x81, 0x0b, 0xff, 0xbb, 0x08, 0x3a, 0x81, 0x7a, 0x86, 0x10, 0x6d, 0x7e, 0x26, 0x34, 0x2e, 0x2c } },
            { "UBX-NAV-PVT",       { 0xb5, 0x62, 0x01, 0x07, 0x5c, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0xe7, 0x07, 0x03, 0x0f, 0x11, 0x2e, 0x2c, 0x37, 0x15, 0x00, 0x00, 0x00, 0xb1, 0x03, 0xec, 0x0b, 0x03, 0x83, 0xea, 0x1d, 0xbd, 0x6c, 0x09, 0x05, 0x56, 0xb6, 0x40, 0x1c, 0x93, 0x02, 0x07, 0x00, 0xaa, 0x49, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf9, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xf5, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x90, 0xbe, 0xe4, 0x01, 0x45, 0x00, 0x00, 0x00, 0x80, 0xa8, 0x12, 0x01, 0x6c, 0x00, 0x04, 0x00, 0x5c, 0x41, 0x4f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0xa3 } },
            { "UBX-NAV-HPPOSECEF", { 0xb5, 0x62, 0x01, 0x13, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0xec, 0x4c, 0x80, 0x19, 0x90, 0xe1, 0xc9, 0x03, 0xf7, 0x6c, 0xd9, 0x1b, 0x1c, 0xec, 0xf6, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x63, 0xaa } },
            { "UBX-NAV-VELECEF",   { 0xb5, 0x62, 0x01, 0x11, 0x14, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x6a } },
            { "UBX-RXM-SFRBX",     { 0xb5, 0x62, 0x02, 0x13, 0x30, 0x00, 0x03, 0x23, 0x00, 0x00, 0x0a, 0x09, 0x02, 0x00, 0xe4, 0x34, 0x90, 0x38, 0xf6, 0xe3, 0x08, 0x3a, 0xf9, 0x3f, 0x4e, 0x24, 0x5b, 0x00, 0xaf, 0x1b, 0x09, 0xfd, 0x5f, 0x04, 0xe6, 0xff, 0x93, 0x25, 0x89, 0x97, 0x5f, 0x3b, 0x48, 0x09, 0x48, 0x0f, 0xf5, 0x7a, 0x58, 0x1f, 0x6d, 0xa0, 0x44, 0x25, 0x0e, 0x01 } },
            { "UBX-NAV-SAT",       { 0xb5, 0x62, 0x01, 0x35, 0x84, 0x02, 0xb8, 0xfa, 0x43, 0x13, 0x01, 0x35, 0x00, 0x00, 0x00, 0x01, 0x27, 0x07, 0x00, 0x01, 0xf2, 0xff, 0x17, 0x19, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x04, 0x1c, 0x01, 0x00, 0x00, 0x17, 0x19, 0x00, 0x00, 0x00, 0x08, 0x2e, 0x3e, 0x2e, 0x01, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x0a, 0x31, 0x40, 0x5f, 0x00, 0x05, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x0f, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0x11, 0x1a, 0x00, 0x00, 0x00, 0x10, 0x29, 0x23, 0xc1, 0x00, 0xfa, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x12, 0x29, 0x0a, 0x46, 0x00, 0xec, 0xff, 0x17, 0x19, 0x00, 0x00, 0x00, 0x15, 0x2b, 0x21, 0x09, 0x01, 0xfd, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x17, 0x2c, 0x25, 0x35, 0x00, 0xfa, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x1a, 0x09, 0x05, 0xaf, 0x00, 0x00, 0x00, 0x13, 0x19, 0x00, 0x00, 0x00, 0x1b, 0x2f, 0x50, 0x78, 0x00, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x1e, 0x26, 0x04, 0x3e, 0x01, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x00, 0x20, 0x27, 0x0a, 0x83, 0x00, 0x00, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x01, 0x7b, 0x27, 0x1f, 0x96, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x01, 0x7f, 0x1f, 0x14, 0x7d, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x00, 0x00, 0x01, 0x80, 0x00, 0x02, 0x66, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x88, 0x29, 0x23, 0xb9, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x02, 0x01, 0x2c, 0x2f, 0xec, 0x00, 0x05, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x03, 0x25, 0x07, 0x1b, 0x00, 0x00, 0x00, 0x17, 0x19, 0x00, 0x00, 0x02, 0x07, 0x26, 0x10, 0x7f, 0x00, 0xe1, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x02, 0x08, 0x29, 0x17, 0x49, 0x00, 0xff, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x0d, 0x2a, 0x27, 0x43, 0x00, 0x0b, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x15, 0x26, 0x14, 0xbb, 0x00, 0xfb, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x1a, 0x2d, 0x4d, 0x39, 0x01, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x1f, 0x2a, 0x1e, 0x35, 0x01, 0x07, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x21, 0x28, 0x1e, 0x08, 0x01, 0x01, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x02, 0x00, 0x02, 0x64, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x05, 0x00, 0x12, 0x78, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x08, 0x20, 0x03, 0x2e, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x03, 0x0d, 0x25, 0x0e, 0x31, 0x00, 0x07, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x13, 0x00, 0x07, 0xb6, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x14, 0x2d, 0x28, 0x8f, 0x00, 0xf7, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x03, 0x18, 0x00, 0x01, 0x55, 0x01, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x1a, 0x00, 0x13, 0x2c, 0x01, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x1d, 0x2f, 0x4c, 0x3f, 0x01, 0x03, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x1e, 0x2d, 0x2a, 0x60, 0x00, 0xfd, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x20, 0x2d, 0x27, 0x43, 0x00, 0x04, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x23, 0x27, 0x16, 0x20, 0x01, 0x00, 0x00, 0x27, 0x1a, 0x00, 0x00, 0x03, 0x27, 0x00, 0x03, 0x43, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x29, 0x00, 0x04, 0x1c, 0x00, 0x00, 0x00, 0x10, 0x19, 0x00, 0x00, 0x03, 0x2d, 0x28, 0x14, 0xf5, 0x00, 0xf9, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x04, 0x67, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x05, 0x03, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x26, 0x15, 0x99, 0x00, 0xea, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x07, 0x2b, 0x1b, 0x24, 0x00, 0xf6, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x08, 0x2d, 0x2c, 0x5f, 0x00, 0xeb, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x0d, 0x1c, 0x0b, 0xd4, 0x00, 0xe1, 0xff, 0x5f, 0x19, 0x12, 0x00, 0x06, 0x0e, 0x2a, 0x24, 0x0c, 0x01, 0xdf, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x0f, 0x2a, 0x16, 0x47, 0x01, 0x06, 0x00, 0x1f, 0x19, 0x00, 0x00, 0x06, 0x11, 0x24, 0x06, 0x19, 0x01, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x06, 0x16, 0x27, 0x07, 0x55, 0x00, 0x00, 0x00, 0x17, 0x19, 0x00, 0x00, 0x06, 0x17, 0x2b, 0x38, 0x32, 0x00, 0xf8, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x18, 0x2e, 0x34, 0x34, 0x01, 0x06, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x46, 0x49 } },
            { "UBX-NAV-SIG",       { 0xb5, 0x62, 0x01, 0x43, 0x38, 0x05, 0xb8, 0xfa, 0x43, 0x13, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xf2, 0xff, 0x27, 0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0xf7, 0xff, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x2e, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03, 0x00, 0x03, 0x00, 0x2c, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x05, 0x00, 0x31, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x03, 0x00, 0xff, 0xff, 0x2b, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0xfa, 0xff, 0x29, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0xe9, 0xff, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0xec, 0xff, 0x29, 0x07, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0xfd, 0xff, 0x2b, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x15, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0xfa, 0xff, 0x2c, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0x03, 0x00, 0xfa, 0xff, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x00, 0x0f, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x02, 0x00, 0x2f, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x01, 0x00, 0x2b, 0x07, 0x04, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x26, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x27, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x08, 0x00, 0x24, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x27, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x00, 0x00, 0x00, 0x00, 0x29, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x05, 0x00, 0x2c, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x06, 0x00, 0x04, 0x00, 0x2f, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x25, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x06, 0x00, 0x00, 0x00, 0x27, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x07, 0x00, 0x00, 0xe1, 0xff, 0x26, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x07, 0x06, 0x00, 0xd1, 0xff, 0x2a, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0xff, 0xff, 0x29, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x08, 0x06, 0x00, 0xfe, 0xff, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x0d, 0x00, 0x00, 0x0b, 0x00, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x0d, 0x06, 0x00, 0x02, 0x00, 0x30, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x15, 0x00, 0x00, 0xfb, 0xff, 0x26, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x15, 0x06, 0x00, 0x01, 0x00, 0x29, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x1a, 0x06, 0x00, 0x01, 0x00, 0x31, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x1a, 0x00, 0x00, 0x02, 0x00, 0x2d, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x1f, 0x00, 0x00, 0x07, 0x00, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x1f, 0x06, 0x00, 0x02, 0x00, 0x2e, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x21, 0x00, 0x00, 0x01, 0x00, 0x28, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x21, 0x06, 0x00, 0x0a, 0x00, 0x2f, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x02, 0x00, 0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0d, 0x02, 0x00, 0x1c, 0x00, 0x28, 0x07, 0x04, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0d, 0x00, 0x00, 0x07, 0x00, 0x25, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x14, 0x00, 0x00, 0xf7, 0xff, 0x2d, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x00, 0x00, 0x03, 0x00, 0x2f, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x00, 0x00, 0xfd, 0xff, 0x2d, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x04, 0x00, 0x2d, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x23, 0x00, 0x00, 0x00, 0x00, 0x27, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x2d, 0x00, 0x00, 0xf9, 0xff, 0x28, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x08, 0xea, 0xff, 0x26, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x02, 0x08, 0x11, 0x00, 0x22, 0x07, 0x04, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x07, 0x00, 0x0c, 0xf6, 0xff, 0x2b, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x07, 0x02, 0x0c, 0xf9, 0xff, 0x27, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x08, 0x00, 0x0d, 0xeb, 0xff, 0x2d, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x08, 0x02, 0x0d, 0xf3, 0xff, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0d, 0x00, 0x05, 0xe1, 0xff, 0x1c, 0x07, 0x04, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0d, 0x02, 0x05, 0xf3, 0xff, 0x20, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x00, 0x00, 0xdf, 0xff, 0x2a, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x02, 0x00, 0xf5, 0xff, 0x2a, 0x07, 0x04, 0x00, 0xe9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x00, 0x07, 0x06, 0x00, 0x2a, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x0f, 0x02, 0x07, 0x0d, 0x00, 0x29, 0x07, 0x00, 0x02, 0x21, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x00, 0x0b, 0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x16, 0x00, 0x04, 0x00, 0x00, 0x27, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x16, 0x02, 0x04, 0x00, 0x00, 0x27, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x17, 0x00, 0x0a, 0xf8, 0xff, 0x2b, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x17, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x09, 0x06, 0x00, 0x2e, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x18, 0x02, 0x09, 0xf9, 0xff, 0x2c, 0x07, 0x04, 0x00, 0xf9, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb0, 0xdd } },
            { "UBX-NAV-STATUS",    { 0xb5, 0x62, 0x01, 0x03, 0x10, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x03, 0xdf, 0x03, 0x88, 0xf2, 0x13, 0x17, 0x00, 0xd5, 0x75, 0xb1, 0x00, 0xa0, 0x87 } },
            { "UBX-NAV-TIMEGPS",   { 0xb5, 0x62, 0x01, 0x20, 0x10, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0xb1, 0x41, 0x00, 0x00, 0xcd, 0x08, 0x12, 0x07, 0x01, 0x00, 0x00, 0x00, 0x1a, 0xa5 } },
            { "UBX-NAV-CLOCK",     { 0xb5, 0x62, 0x01, 0x22, 0x14, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x8f, 0x00, 0x0f, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x66, 0x06 } },
            { "UBX-NAV-COV",       { 0xb5, 0x62, 0x01, 0x36, 0x40, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x00, 0x01, 0x01, 0x00, 0x32, 0x30, 0x19, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x2e, 0x8e, 0x69, 0x38, 0x88, 0x21, 0xad, 0xb6, 0x08, 0xd0, 0xf5, 0x37, 0x6d, 0x9e, 0x00, 0x38, 0x3b, 0xf0, 0xc3, 0xb5, 0x96, 0x61, 0x52, 0x39, 0xa9, 0x3c, 0x91, 0x3b, 0x58, 0x71, 0xe4, 0xb8, 0xb0, 0xc8, 0xb1, 0x39, 0x32, 0xfd, 0x05, 0x3b, 0x3c, 0xb1, 0x01, 0xb9, 0x3a, 0xe5, 0x8f, 0x3b, 0x47, 0x29 } },
            { "UBX-NAV-RELPOSNED", { 0xb5, 0x62, 0x01, 0x3c, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0xb8, 0xd6, 0x24, 0x00, 0x22, 0xb1, 0x09, 0x00, 0x85, 0x3a, 0x00, 0x00, 0xd1, 0x17, 0x26, 0x00, 0xcd, 0x7d, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x4e, 0x40, 0x3b, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x2c, 0x10 } },
            { "UBX-NAV-EOE",       { 0xb5, 0x62, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2e } },
        }, {
        }));  // clang-format on

    // Exercise parser detector function
    TestDetector({ 0xb5, 0x62, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2e });
    TestBadMessage({ 0xb6, 0x62, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2e });  // bad sync char
    TestBadMessage({ 0xb5, 0x63, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2e });  // bad sync char
    TestBadMessage({ 0xb5, 0x62, 0x01, 0x61, 0xff, 0xff, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2e });  // too long payload
    TestBadMessage({ 0xb5, 0x62, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6f, 0x2e });  // bad crc
    TestBadMessage({ 0xb5, 0x62, 0x01, 0x61, 0x04, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x6e, 0x2f });  // bad crc
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, NOV_B)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_NOVB_BIN, {
            { "NOV_B-BESTPOS",     { 0xaa, 0x44, 0x12, 0x1c, 0x2a, 0x00, 0x00, 0xa0, 0x48, 0x00, 0x00, 0x00, 0x23, 0xb4, 0x83, 0x08, 0x64, 0xdb, 0x68, 0x0c, 0x00, 0x08, 0x00, 0x03, 0xba, 0xcd, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xcf, 0x6a, 0x48, 0x15, 0x4c, 0xb3, 0x47, 0x40, 0xe6, 0xeb, 0x19, 0x6b, 0xb8, 0xe3, 0x20, 0x40, 0x00, 0x00, 0x58, 0x31, 0xd2, 0x84, 0x78, 0x40, 0x66, 0x66, 0x3e, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x85, 0x2d, 0x11, 0x3d, 0xf3, 0xd6, 0x04, 0x3d, 0xc6, 0x57, 0x52, 0x3d, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x16, 0x15, 0x15, 0x10,  0x00, 0x21, 0x15, 0x33, 0x3f, 0x6c, 0xbc, 0xfe } },
            { "NOV_B-BESTXYZ",     { 0xaa, 0x44, 0x12, 0x1c, 0xf1, 0x00, 0x00, 0xa0, 0x70, 0x00, 0x00, 0x00, 0x23, 0xb4, 0x83, 0x08, 0x64, 0xdb, 0x68, 0x0c, 0x00, 0x08, 0x00, 0x03, 0xcf, 0x44, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1f, 0x3d, 0xf8, 0xcb, 0x1f, 0x52, 0x50, 0x41, 0x78, 0xc3, 0x4c, 0x3a, 0x76, 0x62, 0x23, 0x41, 0x6f, 0x85, 0xb2, 0x17, 0xda, 0xd2, 0x51, 0x41, 0x16, 0x9c, 0x45, 0x3d, 0x33, 0x55, 0x00, 0x3d, 0xc7, 0xac, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x44, 0xe5, 0x5d, 0x83, 0x19, 0x93, 0x60, 0x3f, 0xf2, 0x70, 0xb0, 0x6b, 0xcf, 0xcd, 0x58, 0xbf, 0xa0, 0xee, 0x54, 0x82, 0xfd, 0xe1, 0x0c, 0xbf, 0x28, 0x7c, 0xe1, 0x3a, 0xca, 0x65, 0xe9, 0x3a, 0xf8, 0xae, 0xdf, 0x3a, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x16, 0x15, 0x15, 0x10, 0x00, 0x21, 0x15, 0x33, 0x0d, 0xdb, 0x0c, 0xcd } },
            { "NOV_B-RAWIMUSX",    { 0xaa, 0x44, 0x13, 0x28, 0xb6, 0x05, 0x83, 0x08, 0x5b, 0xdb, 0x68, 0x0c, 0x04, 0x3d, 0x83, 0x08, 0x32, 0xac, 0xe2, 0xed, 0x33, 0x6a, 0x09, 0x41, 0x00, 0xfe, 0x27, 0xf8, 0x04, 0x11, 0xd5, 0x09, 0xbc, 0x60, 0x60, 0x00, 0x54, 0xfe, 0x61, 0x00, 0x94, 0x0d, 0x01, 0x00, 0xe0, 0x63, 0x08, 0x00, 0x9c, 0xf5, 0x02, 0x00, 0xea, 0xf1, 0x93, 0x8c } },
        }, {
        }));  // clang-format on

    TestDetector({ 0xaa, 0x44, 0x13, 0x28, 0xb6, 0x05, 0x83, 0x08, 0x5b, 0xdb, 0x68, 0x0c, 0x04, 0x3d, 0x83, 0x08, 0x32,
        0xac, 0xe2, 0xed, 0x33, 0x6a, 0x09, 0x41, 0x00, 0xfe, 0x27, 0xf8, 0x04, 0x11, 0xd5, 0x09, 0xbc, 0x60, 0x60,
        0x00, 0x54, 0xfe, 0x61, 0x00, 0x94, 0x0d, 0x01, 0x00, 0xe0, 0x63, 0x08, 0x00, 0x9c, 0xf5, 0x02, 0x00, 0xea,
        0xf1, 0x93, 0x8c });
    TestBadMessage({ 0xaa, 0x44, 0x12, 0x1c, 0x2a, 0x00, 0x00, 0xa0, 0xff, 0xff, 0x00, 0x00, 0x23, 0xb4, 0x83, 0x08,
        0x64, 0xdb, 0x68, 0x0c, 0x00, 0x08, 0x00, 0x03, 0xba, 0xcd, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
        0x00, 0x00, 0xcf, 0x6a, 0x48, 0x15, 0x4c, 0xb3, 0x47, 0x40, 0xe6, 0xeb, 0x19, 0x6b, 0xb8, 0xe3, 0x20, 0x40,
        0x00, 0x00, 0x58, 0x31, 0xd2, 0x84, 0x78, 0x40, 0x66, 0x66, 0x3e, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x85, 0x2d,
        0x11, 0x3d, 0xf3, 0xd6, 0x04, 0x3d, 0xc6, 0x57, 0x52, 0x3d, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
        0x00, 0x00, 0x00, 0x00, 0x16, 0x15, 0x15, 0x10, 0x00, 0x21, 0x15, 0x33, 0x3f, 0x6c, 0xbc, 0xfe });  // too long
    TestBadMessage({ 0xaa, 0x44, 0x13, 0x28, 0xb6, 0x05, 0x83, 0x08, 0x5b, 0xdb, 0x68, 0x0c, 0x04, 0x3d, 0x83, 0x08,
        0x32, 0xac, 0xe2, 0xed, 0x33, 0x6a, 0x09, 0x41, 0x00, 0xfe, 0x27, 0xf8, 0x04, 0x11, 0xd5, 0x09, 0xbc, 0x60,
        0x60, 0x00, 0x54, 0xfe, 0x61, 0x00, 0x94, 0x0d, 0x01, 0x00, 0xe0, 0x63, 0x08, 0x00, 0x9c, 0xf5, 0x02, 0x00,
        0xea, 0xf1, 0x93, 0x8d });  // bad CRC
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, RTCM3)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_RTCM3_BIN, {
            { "RTCM3-TYPE1107",    { 0xd3, 0x00, 0x16, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9b, 0x2f } },
            { "RTCM3-TYPE1077",    { 0xd3, 0x01, 0x21, 0x43, 0x50, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x40, 0xa1, 0xa5, 0x32, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x7f, 0xdd, 0xfb, 0xa8, 0xa2, 0x22, 0xa9, 0xa5, 0xa9, 0x25, 0x24, 0xaa, 0x21, 0xaa, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x39, 0xaa, 0xad, 0x7f, 0x4a, 0x28, 0x71, 0x1f, 0xd9, 0x2d, 0x00, 0x8f, 0x17, 0x06, 0x7d, 0x6e, 0x01, 0xa8, 0x2d, 0xe1, 0x7c, 0x07, 0x8c, 0x1d, 0x5f, 0xf5, 0x41, 0x8b, 0x07, 0xfe, 0x0f, 0x50, 0x35, 0xdf, 0x85, 0x0a, 0x14, 0xb8, 0xad, 0xe6, 0x6a, 0x5a, 0x7e, 0xa0, 0x41, 0xe2, 0xde, 0x76, 0x1c, 0xa0, 0x62, 0x70, 0x66, 0x16, 0x88, 0x1b, 0x9f, 0xce, 0xde, 0x14, 0xed, 0x6c, 0xbf, 0x60, 0x94, 0xf8, 0x0e, 0xdf, 0x6f, 0x44, 0xfe, 0x1c, 0x77, 0xb1, 0x3b, 0x7c, 0x27, 0xa7, 0xb2, 0xe8, 0x6e, 0x8c, 0x2e, 0x34, 0x19, 0x63, 0x69, 0x4f, 0xff, 0xf7, 0xa0, 0x9e, 0x2c, 0xcf, 0xfd, 0x4c, 0x07, 0x8f, 0xa6, 0x57, 0x61, 0x75, 0x77, 0x84, 0x20, 0xe0, 0x09, 0x5c, 0x3f, 0xff, 0xeb, 0x60, 0x4e, 0x05, 0x5f, 0xf8, 0x93, 0xaf, 0xa4, 0xe5, 0x28, 0x40, 0xa0, 0xa7, 0xa5, 0x52, 0xa0, 0x61, 0x07, 0x78, 0x00, 0x0f, 0x7f, 0xff, 0xf7, 0x50, 0x72, 0xa1, 0x50, 0x18, 0xbe, 0x67, 0xff, 0xf8, 0x37, 0x9f, 0xfc, 0x7f, 0x5b, 0x15, 0xd8, 0x00, 0xe0, 0xca, 0x32, 0xdc, 0xcf, 0x31, 0xc4, 0x80, 0x04, 0xed, 0x41, 0x50, 0xb0, 0xa4, 0xd7, 0x32, 0x00, 0x00, 0x04, 0xd3, 0x39, 0x00, 0x10, 0x33, 0x58, 0x00, 0x04, 0x47, 0xc2, 0x80, 0xbc, 0x2f, 0x0b, 0x82, 0x80, 0x94, 0x1f, 0x0b, 0x42, 0x40, 0x98, 0x2e, 0x0a, 0x82, 0x50, 0x50, 0x1c, 0x0b, 0x42, 0xa0, 0x44, 0x28, 0x09, 0x43, 0x82, 0xe7, 0x0c, 0x80, 0x94, 0x41, 0x38, 0x39, 0x80, 0x73, 0xc1, 0x11, 0x6a, 0x2f, 0x34, 0x7d, 0x87, 0xa5, 0x9e, 0xe6, 0x1f, 0x88, 0x36, 0xaf, 0x6a, 0x88, 0x05, 0x10, 0x63, 0xf4, 0x8c, 0x21, 0x57, 0x41, 0xc5, 0x1c, 0x8d, 0x36, 0xbd, 0x80, 0x91, 0xb2, 0x79 } },
            { "RTCM3-TYPE1033",    { 0xd3, 0x00, 0x2e, 0x40, 0x90, 0x00, 0x0b, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x00, 0x00, 0x15, 0x52, 0x54, 0x4b, 0x42, 0x61, 0x73, 0x65, 0x20, 0x55, 0x62, 0x6c, 0x6f, 0x78, 0x5f, 0x5a, 0x45, 0x44, 0x2d, 0x46, 0x39, 0x50, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x30, 0x00, 0x7c, 0x92, 0xfb } },
        }, {
        }));  // clang-format on

    TestDetector({ 0xd3, 0x00, 0x16, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9b, 0x2f });
    TestBadMessage({ 0xd3, 0xff, 0xff, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9b, 0x2f });  // too long payload
    TestBadMessage({ 0xd3, 0x00, 0x16, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9c, 0x2f });  // bad CRC
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, SPARTN)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_SPARTN_BIN, {
            { "SPARTN-OCB-GLO",    { 0x73, 0x00, 0x10, 0xe3, 0x18, 0xb9, 0xa1, 0x8d, 0x68, 0x5b, 0x1f, 0x88, 0xa0, 0xba, 0xc2, 0x37, 0x43, 0xeb, 0x3f, 0xbe, 0x08, 0xf8, 0x51, 0x7f, 0x3a, 0x9a, 0x78, 0x32, 0x85, 0xc6, 0xe2, 0xd0, 0x7e, 0xee, 0x37, 0xcb, 0x3d, 0x6a, 0x8f, 0xf1, 0x4c, 0x27, 0x43, 0x0d, 0x2a, 0x70, 0xf2, 0x01 } },
            { "SPARTN-OCB-GPS",    { 0x73, 0x00, 0x7a, 0x6a, 0x08, 0xb9, 0xa0, 0x3d, 0xe0, 0x5b, 0x1d, 0x48, 0x92, 0x20, 0xe3, 0x57, 0xa1, 0x89, 0x26, 0x9b, 0xfe, 0x4c, 0x18, 0xf4, 0x14, 0x2e, 0x2c, 0xc1, 0x6c, 0x23, 0xa7, 0x0b, 0x66, 0xfc, 0xc0, 0xc9, 0xcb, 0xa7, 0xc0, 0x18, 0x82, 0xd5, 0x59, 0x4a, 0xda, 0x6e, 0xa3, 0x6b, 0x06, 0xd5, 0xa7, 0x00, 0xd5, 0xcd, 0xd3, 0xb8, 0x98, 0xbb, 0x37, 0x3c, 0x36, 0x6b, 0x13, 0x70, 0xf7, 0xd5, 0x46, 0x11, 0x00, 0x1e, 0xb1, 0x0d, 0x47, 0x1e, 0xcd, 0xdd, 0x8b, 0xb0, 0x40, 0xba, 0xb6, 0x86, 0x5c, 0x4c, 0x25, 0x62, 0xdd, 0xff, 0xdb, 0xee, 0x6c, 0x98, 0xe5, 0xd4, 0xae, 0xf6, 0xb8, 0x5e, 0xf3, 0x3e, 0x9f, 0xa0, 0x6c, 0x1b, 0xbd, 0xec, 0xbb, 0xea, 0x88, 0x34, 0xf3, 0x57, 0x33, 0x9a, 0x4a, 0x29, 0x70, 0x9f, 0x14, 0x99, 0x1d, 0x4f, 0x9e, 0xdd, 0x92, 0x48, 0x70, 0x24, 0x28, 0x5c, 0x1a, 0xb4, 0x65, 0x1c, 0x7d, 0x2f, 0x86, 0x31, 0xd3, 0x3f, 0xa6, 0xf6, 0xa0, 0x43, 0xb0, 0x0b, 0x5f, 0xcc, 0xad, 0xb4, 0xa0, 0xe8, 0xd9, 0xe1, 0x60, 0x19, 0x46, 0xe7, 0xbd, 0x64, 0x2f, 0x09, 0x1a, 0x82, 0xb6, 0x1f, 0x37, 0x20, 0x79, 0xde, 0x64, 0x60, 0x4a, 0x9f, 0x2e, 0x52, 0x6d, 0xa0, 0x20, 0x97, 0xab, 0xb6, 0xd2, 0x57, 0x44, 0xc7, 0xa4, 0xd1, 0x08, 0xf0, 0xd0, 0x3c, 0xe4, 0xc8, 0x9e, 0x75, 0x9a, 0x66, 0xea, 0xd8, 0x78, 0x24, 0x13, 0x7a, 0xd0, 0xd2, 0xab, 0x29, 0x1c, 0xaf, 0x2e, 0x37, 0x94, 0x3b, 0x58, 0x31, 0x58, 0x56, 0xe1, 0x04, 0x45, 0x99, 0x7a, 0xc6, 0x7f, 0x85, 0xe1, 0x91, 0x9a, 0x77, 0x85, 0x5b, 0x6b, 0x3d, 0x2f, 0x55, 0x8c, 0x59, 0xe7, 0x06, 0x7f, 0x32, 0xa4, 0x26, 0x44, 0xb7, 0x44, 0x10, 0x1d, 0xa5, 0xbb, 0xf4, 0x59, 0x00, 0xf6, 0x1b, 0x2a, 0x06, 0xc7 } },
            { "SPARTN-GAD-GAD",    { 0x73, 0x04, 0x07, 0xe4, 0x01, 0x4c, 0xd0, 0x5b, 0x1e, 0x48, 0xfe, 0x92, 0xb2, 0xd6, 0xd1, 0xe6, 0x6f, 0x07, 0x30, 0x68, 0x18, 0x8e, 0x48, 0xb3, 0xe1, 0x26, 0x20, 0x4a } },
            { "SPARTN-HPAC-GLO",   { 0x73, 0x02, 0x58, 0xea, 0x18, 0xb9, 0xa1, 0x8f, 0xc0, 0x5b, 0x19, 0x88, 0xda, 0x72, 0xd2, 0x47, 0xb4, 0xf6, 0x0b, 0x58, 0x9a, 0x57, 0x9e, 0x28, 0xb3, 0x29, 0x13, 0xdd, 0xad, 0x03, 0x18, 0x80, 0xbe, 0xdf, 0xcd, 0x67, 0xf9, 0xae, 0x17, 0xbe, 0x9c, 0x53, 0x38, 0xed, 0x41, 0xf0, 0xc2, 0xd7, 0xca, 0x77, 0x31, 0x3d, 0xad, 0xa2, 0xb5, 0x18, 0x53, 0x64, 0xa4, 0xc1, 0xf0, 0x16, 0x53, 0xa5, 0x1e, 0x76, 0xa9, 0x37, 0x97, 0x52, 0x54, 0x47, 0xed, 0x41, 0x73, 0xe1, 0x70, 0x63, 0x89, 0x30, 0x29, 0x77, 0x1a, 0x39, 0x9d, 0x01, 0xb2, 0x02, 0x65, 0x6f, 0x4b, 0x75, 0x6f, 0x01, 0x01, 0xf0, 0x21, 0x5a, 0x4e, 0xc6, 0x2d, 0x2a, 0xa3, 0x9f, 0x3a, 0x08, 0x03, 0x93, 0x2d, 0x1e, 0x82, 0x94, 0xe9, 0x67, 0xb3, 0xdb, 0xd7, 0x7e, 0xbd, 0x49, 0x5a, 0x46, 0xe5, 0x03, 0xe8, 0x9e, 0x7a, 0xee, 0xba, 0x78, 0x6c, 0x12, 0x71, 0xb1, 0xf7, 0xc7, 0xfb, 0xc5, 0x65, 0xa7, 0xa8, 0x83, 0xf8, 0xb9, 0x9b, 0x83, 0x08, 0x29, 0xe6, 0x84, 0xf5, 0x6f, 0x8d, 0xb2, 0x01, 0x74, 0xed, 0x27, 0xc7, 0x57, 0xc9, 0x41, 0x63, 0x8e, 0xb5, 0x7c, 0x6f, 0xfa, 0x1f, 0xfa, 0xee, 0xfc, 0x17, 0xf9, 0x9b, 0x60, 0xa4, 0x16, 0x6c, 0xa1, 0x3e, 0xb7, 0xe2, 0x16, 0xc6, 0xd7, 0x24, 0xd2, 0x06, 0xc6, 0x9a, 0xb2 } },
        }, {
        }));  // clang-format on

    TestDetector({ 0x73, 0x02, 0x58, 0xea, 0x18, 0xb9, 0xa1, 0x8f, 0xc0, 0x5b, 0x19, 0x88, 0xda, 0x72, 0xd2, 0x47, 0xb4,
        0xf6, 0x0b, 0x58, 0x9a, 0x57, 0x9e, 0x28, 0xb3, 0x29, 0x13, 0xdd, 0xad, 0x03, 0x18, 0x80, 0xbe, 0xdf, 0xcd,
        0x67, 0xf9, 0xae, 0x17, 0xbe, 0x9c, 0x53, 0x38, 0xed, 0x41, 0xf0, 0xc2, 0xd7, 0xca, 0x77, 0x31, 0x3d, 0xad,
        0xa2, 0xb5, 0x18, 0x53, 0x64, 0xa4, 0xc1, 0xf0, 0x16, 0x53, 0xa5, 0x1e, 0x76, 0xa9, 0x37, 0x97, 0x52, 0x54,
        0x47, 0xed, 0x41, 0x73, 0xe1, 0x70, 0x63, 0x89, 0x30, 0x29, 0x77, 0x1a, 0x39, 0x9d, 0x01, 0xb2, 0x02, 0x65,
        0x6f, 0x4b, 0x75, 0x6f, 0x01, 0x01, 0xf0, 0x21, 0x5a, 0x4e, 0xc6, 0x2d, 0x2a, 0xa3, 0x9f, 0x3a, 0x08, 0x03,
        0x93, 0x2d, 0x1e, 0x82, 0x94, 0xe9, 0x67, 0xb3, 0xdb, 0xd7, 0x7e, 0xbd, 0x49, 0x5a, 0x46, 0xe5, 0x03, 0xe8,
        0x9e, 0x7a, 0xee, 0xba, 0x78, 0x6c, 0x12, 0x71, 0xb1, 0xf7, 0xc7, 0xfb, 0xc5, 0x65, 0xa7, 0xa8, 0x83, 0xf8,
        0xb9, 0x9b, 0x83, 0x08, 0x29, 0xe6, 0x84, 0xf5, 0x6f, 0x8d, 0xb2, 0x01, 0x74, 0xed, 0x27, 0xc7, 0x57, 0xc9,
        0x41, 0x63, 0x8e, 0xb5, 0x7c, 0x6f, 0xfa, 0x1f, 0xfa, 0xee, 0xfc, 0x17, 0xf9, 0x9b, 0x60, 0xa4, 0x16, 0x6c,
        0xa1, 0x3e, 0xb7, 0xe2, 0x16, 0xc6, 0xd7, 0x24, 0xd2, 0x06, 0xc6, 0x9a, 0xb2 });
    TestBadMessage({ 0x73, 0x04, 0x07, 0xe4, 0x01, 0x4c, 0xd0, 0x5b, 0x1e, 0x48, 0xfe, 0x92, 0xb2, 0xd6, 0xd1, 0xe6,
        0x6f, 0x07, 0x30, 0x68, 0x18, 0x8e, 0x48, 0xb3, 0xe1, 0x26, 0x20, 0x4b });  // bad CRC
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, FP_A)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_FPA_BIN, {
            { "FP_A-ODOMETRY",     { 0x24, 0x46, 0x50, 0x2c, 0x4f, 0x44, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x2c, 0x32, 0x2c, 0x32, 0x32, 0x35, 0x33, 0x2c, 0x33, 0x32, 0x33, 0x32, 0x39, 0x39, 0x2e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x38, 0x2c, 0x38, 0x2c, 0x2d, 0x31, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x66, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x72, 0x32, 0x5f, 0x32, 0x2e, 0x36, 0x33, 0x2e, 0x31, 0x5f, 0x32, 0x30, 0x34, 0x2a, 0x37, 0x42, 0x0d, 0x0a } },
            { "FP_A-TF",           { 0x24, 0x46, 0x50, 0x2c, 0x54, 0x46, 0x2c, 0x32, 0x2c, 0x32, 0x32, 0x35, 0x33, 0x2c, 0x33, 0x32, 0x33, 0x32, 0x39, 0x39, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x56, 0x52, 0x54, 0x4b, 0x2c, 0x43, 0x41, 0x4d, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x33, 0x34, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x31, 0x36, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x36, 0x36, 0x0d, 0x0a } },
        }, {
        }));  // clang-format on
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, NMEA)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_NMEA_BIN, {
            { "NMEA-GN-RMC",       { 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a } },
            { "NMEA-GN-GGA",       { 0x24, 0x47, 0x4e, 0x47, 0x47, 0x41, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x34, 0x2c, 0x31, 0x32, 0x2c, 0x30, 0x2e, 0x35, 0x38, 0x2c, 0x34, 0x31, 0x32, 0x2e, 0x31, 0x2c, 0x4d, 0x2c, 0x34, 0x37, 0x2e, 0x33, 0x2c, 0x4d, 0x2c, 0x31, 0x2e, 0x32, 0x2c, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x36, 0x43, 0x0d, 0x0a } },
        }, {
        }));  // clang-format on

    TestDetector({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c,
        0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38,
        0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c,
        0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, '\\',  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, '~',  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, '!',  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, '$',  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x19,  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x81,  // <-- here
        0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c,
        0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a });  // bad char
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c,
        0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x47, 0x2a,
        0x30, 0x44, 0x0d, 0x0a });  // too long
    TestBadMessage({ 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30,
        0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30,
        0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c,
        0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x45, 0x0d,
        0x0a });  // bad CRC
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, Mixed)
{
    Parser parser;
    EXPECT_TRUE(  // clang-format off
        TestLog(parser, TEST_DATA_MIXED_BIN, {
            { "FP_A-ODOMETRY",             { 0x24, 0x46, 0x50, 0x2c, 0x4f, 0x44, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x2c, 0x32, 0x2c, 0x32, 0x32, 0x35, 0x33, 0x2c, 0x33, 0x32, 0x33, 0x32, 0x39, 0x39, 0x2e, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x30, 0x2c, 0x30, 0x2c, 0x38, 0x2c, 0x38, 0x2c, 0x2d, 0x31, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x66, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x72, 0x32, 0x5f, 0x32, 0x2e, 0x36, 0x33, 0x2e, 0x31, 0x5f, 0x32, 0x30, 0x34, 0x2a, 0x37, 0x42, 0x0d, 0x0a } },
            { "NMEA-GN-RMC",               { 0x24, 0x47, 0x4e, 0x52, 0x4d, 0x43, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c, 0x41, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x2c, 0x2c, 0x31, 0x35, 0x30, 0x33, 0x32, 0x33, 0x2c, 0x2c, 0x2c, 0x52, 0x2c, 0x56, 0x2a, 0x30, 0x44, 0x0d, 0x0a } },
            { "NOV_B-BESTPOS",             { 0xaa, 0x44, 0x12, 0x1c, 0x2a, 0x00, 0x00, 0xa0, 0x48, 0x00, 0x00, 0x00, 0x23, 0xb4, 0x83, 0x08, 0x64, 0xdb, 0x68, 0x0c, 0x00, 0x08, 0x00, 0x03, 0xba, 0xcd, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xcf, 0x6a, 0x48, 0x15, 0x4c, 0xb3, 0x47, 0x40, 0xe6, 0xeb, 0x19, 0x6b, 0xb8, 0xe3, 0x20, 0x40, 0x00, 0x00, 0x58, 0x31, 0xd2, 0x84, 0x78, 0x40, 0x66, 0x66, 0x3e, 0x42, 0x3d, 0x00, 0x00, 0x00, 0x85, 0x2d, 0x11, 0x3d, 0xf3, 0xd6, 0x04, 0x3d, 0xc6, 0x57, 0x52, 0x3d, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x16, 0x15, 0x15, 0x10, 0x00, 0x21, 0x15, 0x33, 0x3f, 0x6c, 0xbc, 0xfe } },
            { "OTHER",        /* random */ { 0xe5, 0x60, 0x12, 0x2f, 0x97, 0x8c, 0x5e, 0x1c, 0x51, 0x01, 0xb8, 0xd1, 0xe2, 0x33, 0x15, 0xed, 0xcd, 0x96, 0x2e, 0x36, 0x66, 0x32, 0x51, 0xf5, 0xa7, 0x6a, 0x40, 0x5e, 0x38, 0x13, 0xd7, 0xf4, 0xba, 0x78, 0xb3, 0x98, 0xce, 0x6c, 0x8f, 0x4e, 0x32, 0x2c } },
            { "RTCM3-TYPE1107",            { 0xd3, 0x00, 0x16, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x9b, 0x2f } },
            { "SPARTN-OCB-GLO",            { 0x73, 0x00, 0x10, 0xe3, 0x18, 0xb9, 0xa1, 0x8d, 0x68, 0x5b, 0x1f, 0x88, 0xa0, 0xba, 0xc2, 0x37, 0x43, 0xeb, 0x3f, 0xbe, 0x08, 0xf8, 0x51, 0x7f, 0x3a, 0x9a, 0x78, 0x32, 0x85, 0xc6, 0xe2, 0xd0, 0x7e, 0xee, 0x37, 0xcb, 0x3d, 0x6a, 0x8f, 0xf1, 0x4c, 0x27, 0x43, 0x0d, 0x2a, 0x70, 0xf2, 0x01 } },
            { "UBX-TIM-TP",                { 0xb5, 0x62, 0x0d, 0x01, 0x10, 0x00, 0x88, 0xb7, 0x43, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0x08, 0x1b, 0x3f, 0xe2, 0xd2 } },
            { "OTHER", /* partial RTCM3 */ { 0xd3, 0x00, 0x16, 0x45, 0x30, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
            { "FP_A-TF",                   { 0x24, 0x46, 0x50, 0x2c, 0x54, 0x46, 0x2c, 0x32, 0x2c, 0x32, 0x32, 0x35, 0x33, 0x2c, 0x33, 0x32, 0x33, 0x32, 0x39, 0x39, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x56, 0x52, 0x54, 0x4b, 0x2c, 0x43, 0x41, 0x4d, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x33, 0x34, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x31, 0x36, 0x30, 0x30, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x31, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x36, 0x36, 0x0d, 0x0a } },
            { "NMEA-GN-GGA",               { 0x24, 0x47, 0x4e, 0x47, 0x47, 0x41, 0x2c, 0x31, 0x37, 0x34, 0x36, 0x34, 0x34, 0x2e, 0x32, 0x30, 0x2c, 0x34, 0x37, 0x32, 0x34, 0x2e, 0x30, 0x31, 0x38, 0x31, 0x38, 0x2c, 0x4e, 0x2c, 0x30, 0x30, 0x38, 0x32, 0x37, 0x2e, 0x30, 0x32, 0x32, 0x34, 0x34, 0x2c, 0x45, 0x2c, 0x34, 0x2c, 0x31, 0x32, 0x2c, 0x30, 0x2e, 0x35, 0x38, 0x2c, 0x34, 0x31, 0x32, 0x2e, 0x31, 0x2c, 0x4d, 0x2c, 0x34, 0x37, 0x2e, 0x33, 0x2c, 0x4d, 0x2c, 0x31, 0x2e, 0x32, 0x2c, 0x30, 0x30, 0x30, 0x30, 0x2a, 0x36, 0x43, 0x0d, 0x0a } },
            { "NOV_B-BESTXYZ",             { 0xaa, 0x44, 0x12, 0x1c, 0xf1, 0x00, 0x00, 0xa0, 0x70, 0x00, 0x00, 0x00, 0x23, 0xb4, 0x83, 0x08, 0x64, 0xdb, 0x68, 0x0c, 0x00, 0x08, 0x00, 0x03, 0xcf, 0x44, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1f, 0x3d, 0xf8, 0xcb, 0x1f, 0x52, 0x50, 0x41, 0x78, 0xc3, 0x4c, 0x3a, 0x76, 0x62, 0x23, 0x41, 0x6f, 0x85, 0xb2, 0x17, 0xda, 0xd2, 0x51, 0x41, 0x16, 0x9c, 0x45, 0x3d, 0x33, 0x55, 0x00, 0x3d, 0xc7, 0xac, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x44, 0xe5, 0x5d, 0x83, 0x19, 0x93, 0x60, 0x3f, 0xf2, 0x70, 0xb0, 0x6b, 0xcf, 0xcd, 0x58, 0xbf, 0xa0, 0xee, 0x54, 0x82, 0xfd, 0xe1, 0x0c, 0xbf, 0x28, 0x7c, 0xe1, 0x3a, 0xca, 0x65, 0xe9, 0x3a, 0xf8, 0xae, 0xdf, 0x3a, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x16, 0x15, 0x15, 0x10, 0x00, 0x21, 0x15, 0x33, 0x0d, 0xdb, 0x0c, 0xcd } },
            { "RTCM3-TYPE1077",            { 0xd3, 0x01, 0x21, 0x43, 0x50, 0x00, 0x4d, 0x10, 0x93, 0xa2, 0x00, 0x00, 0x40, 0xa1, 0xa5, 0x32, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x80, 0x00, 0x7f, 0xdd, 0xfb, 0xa8, 0xa2, 0x22, 0xa9, 0xa5, 0xa9, 0x25, 0x24, 0xaa, 0x21, 0xaa, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x39, 0xaa, 0xad, 0x7f, 0x4a, 0x28, 0x71, 0x1f, 0xd9, 0x2d, 0x00, 0x8f, 0x17, 0x06, 0x7d, 0x6e, 0x01, 0xa8, 0x2d, 0xe1, 0x7c, 0x07, 0x8c, 0x1d, 0x5f, 0xf5, 0x41, 0x8b, 0x07, 0xfe, 0x0f, 0x50, 0x35, 0xdf, 0x85, 0x0a, 0x14, 0xb8, 0xad, 0xe6, 0x6a, 0x5a, 0x7e, 0xa0, 0x41, 0xe2, 0xde, 0x76, 0x1c, 0xa0, 0x62, 0x70, 0x66, 0x16, 0x88, 0x1b, 0x9f, 0xce, 0xde, 0x14, 0xed, 0x6c, 0xbf, 0x60, 0x94, 0xf8, 0x0e, 0xdf, 0x6f, 0x44, 0xfe, 0x1c, 0x77, 0xb1, 0x3b, 0x7c, 0x27, 0xa7, 0xb2, 0xe8, 0x6e, 0x8c, 0x2e, 0x34, 0x19, 0x63, 0x69, 0x4f, 0xff, 0xf7, 0xa0, 0x9e, 0x2c, 0xcf, 0xfd, 0x4c, 0x07, 0x8f, 0xa6, 0x57, 0x61, 0x75, 0x77, 0x84, 0x20, 0xe0, 0x09, 0x5c, 0x3f, 0xff, 0xeb, 0x60, 0x4e, 0x05, 0x5f, 0xf8, 0x93, 0xaf, 0xa4, 0xe5, 0x28, 0x40, 0xa0, 0xa7, 0xa5, 0x52, 0xa0, 0x61, 0x07, 0x78, 0x00, 0x0f, 0x7f, 0xff, 0xf7, 0x50, 0x72, 0xa1, 0x50, 0x18, 0xbe, 0x67, 0xff, 0xf8, 0x37, 0x9f, 0xfc, 0x7f, 0x5b, 0x15, 0xd8, 0x00, 0xe0, 0xca, 0x32, 0xdc, 0xcf, 0x31, 0xc4, 0x80, 0x04, 0xed, 0x41, 0x50, 0xb0, 0xa4, 0xd7, 0x32, 0x00, 0x00, 0x04, 0xd3, 0x39, 0x00, 0x10, 0x33, 0x58, 0x00, 0x04, 0x47, 0xc2, 0x80, 0xbc, 0x2f, 0x0b, 0x82, 0x80, 0x94, 0x1f, 0x0b, 0x42, 0x40, 0x98, 0x2e, 0x0a, 0x82, 0x50, 0x50, 0x1c, 0x0b, 0x42, 0xa0, 0x44, 0x28, 0x09, 0x43, 0x82, 0xe7, 0x0c, 0x80, 0x94, 0x41, 0x38, 0x39, 0x80, 0x73, 0xc1, 0x11, 0x6a, 0x2f, 0x34, 0x7d, 0x87, 0xa5, 0x9e, 0xe6, 0x1f, 0x88, 0x36, 0xaf, 0x6a, 0x88, 0x05, 0x10, 0x63, 0xf4, 0x8c, 0x21, 0x57, 0x41, 0xc5, 0x1c, 0x8d, 0x36, 0xbd, 0x80, 0x91, 0xb2, 0x79 } },
            { "SPARTN-OCB-GPS",            { 0x73, 0x00, 0x7a, 0x6a, 0x08, 0xb9, 0xa0, 0x3d, 0xe0, 0x5b, 0x1d, 0x48, 0x92, 0x20, 0xe3, 0x57, 0xa1, 0x89, 0x26, 0x9b, 0xfe, 0x4c, 0x18, 0xf4, 0x14, 0x2e, 0x2c, 0xc1, 0x6c, 0x23, 0xa7, 0x0b, 0x66, 0xfc, 0xc0, 0xc9, 0xcb, 0xa7, 0xc0, 0x18, 0x82, 0xd5, 0x59, 0x4a, 0xda, 0x6e, 0xa3, 0x6b, 0x06, 0xd5, 0xa7, 0x00, 0xd5, 0xcd, 0xd3, 0xb8, 0x98, 0xbb, 0x37, 0x3c, 0x36, 0x6b, 0x13, 0x70, 0xf7, 0xd5, 0x46, 0x11, 0x00, 0x1e, 0xb1, 0x0d, 0x47, 0x1e, 0xcd, 0xdd, 0x8b, 0xb0, 0x40, 0xba, 0xb6, 0x86, 0x5c, 0x4c, 0x25, 0x62, 0xdd, 0xff, 0xdb, 0xee, 0x6c, 0x98, 0xe5, 0xd4, 0xae, 0xf6, 0xb8, 0x5e, 0xf3, 0x3e, 0x9f, 0xa0, 0x6c, 0x1b, 0xbd, 0xec, 0xbb, 0xea, 0x88, 0x34, 0xf3, 0x57, 0x33, 0x9a, 0x4a, 0x29, 0x70, 0x9f, 0x14, 0x99, 0x1d, 0x4f, 0x9e, 0xdd, 0x92, 0x48, 0x70, 0x24, 0x28, 0x5c, 0x1a, 0xb4, 0x65, 0x1c, 0x7d, 0x2f, 0x86, 0x31, 0xd3, 0x3f, 0xa6, 0xf6, 0xa0, 0x43, 0xb0, 0x0b, 0x5f, 0xcc, 0xad, 0xb4, 0xa0, 0xe8, 0xd9, 0xe1, 0x60, 0x19, 0x46, 0xe7, 0xbd, 0x64, 0x2f, 0x09, 0x1a, 0x82, 0xb6, 0x1f, 0x37, 0x20, 0x79, 0xde, 0x64, 0x60, 0x4a, 0x9f, 0x2e, 0x52, 0x6d, 0xa0, 0x20, 0x97, 0xab, 0xb6, 0xd2, 0x57, 0x44, 0xc7, 0xa4, 0xd1, 0x08, 0xf0, 0xd0, 0x3c, 0xe4, 0xc8, 0x9e, 0x75, 0x9a, 0x66, 0xea, 0xd8, 0x78, 0x24, 0x13, 0x7a, 0xd0, 0xd2, 0xab, 0x29, 0x1c, 0xaf, 0x2e, 0x37, 0x94, 0x3b, 0x58, 0x31, 0x58, 0x56, 0xe1, 0x04, 0x45, 0x99, 0x7a, 0xc6, 0x7f, 0x85, 0xe1, 0x91, 0x9a, 0x77, 0x85, 0x5b, 0x6b, 0x3d, 0x2f, 0x55, 0x8c, 0x59, 0xe7, 0x06, 0x7f, 0x32, 0xa4, 0x26, 0x44, 0xb7, 0x44, 0x10, 0x1d, 0xa5, 0xbb, 0xf4, 0x59, 0x00, 0xf6, 0x1b, 0x2a, 0x06, 0xc7 } },
            { "UBX-MON-HW",                { 0xb5, 0x62, 0x0a, 0x09, 0x3c, 0x00, 0xc1, 0x81, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x4e, 0x66, 0x00, 0x00, 0x4f, 0x00, 0x0d, 0x1a, 0x02, 0x01, 0x01, 0x85, 0xbf, 0xff, 0x01, 0x00, 0x3e, 0x06, 0x07, 0x09, 0x08, 0x10, 0xff, 0x12, 0x13, 0x14, 0x15, 0x0e, 0x0a, 0x0b, 0x0f, 0x44, 0x16, 0x39, 0x0e, 0x5a, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x0d } },
            { "OTHER",   /* partial UBX */ { 0xb5, 0x62, 0x0a, 0x09, 0x3c, 0x00, 0xc1, 0x81, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x4e, 0x66, 0x00, 0x00, 0x4f, 0x00, 0x0d, 0x1a, 0x02, 0x01, 0x01, 0x85, 0xbf, 0xff, 0x01, 0x00, 0x3e, 0x06, 0x07, 0x09, 0x08, 0x10 } },
            { "NOV_B-RAWIMUSX",            { 0xaa, 0x44, 0x13, 0x28, 0xb6, 0x05, 0x83, 0x08, 0x5b, 0xdb, 0x68, 0x0c, 0x04, 0x3d, 0x83, 0x08, 0x32, 0xac, 0xe2, 0xed, 0x33, 0x6a, 0x09, 0x41, 0x00, 0xfe, 0x27, 0xf8, 0x04, 0x11, 0xd5, 0x09, 0xbc, 0x60, 0x60, 0x00, 0x54, 0xfe, 0x61, 0x00, 0x94, 0x0d, 0x01, 0x00, 0xe0, 0x63, 0x08, 0x00, 0x9c, 0xf5, 0x02, 0x00, 0xea, 0xf1, 0x93, 0x8c } },
            { "RTCM3-TYPE1033",            { 0xd3, 0x00, 0x2e, 0x40, 0x90, 0x00, 0x0b, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x4e, 0x41, 0x00, 0x00, 0x15, 0x52, 0x54, 0x4b, 0x42, 0x61, 0x73, 0x65, 0x20, 0x55, 0x62, 0x6c, 0x6f, 0x78, 0x5f, 0x5a, 0x45, 0x44, 0x2d, 0x46, 0x39, 0x50, 0x05, 0x32, 0x2e, 0x33, 0x2e, 0x30, 0x00, 0x7c, 0x92, 0xfb } },
            { "SPARTN-GAD-GAD",            { 0x73, 0x04, 0x07, 0xe4, 0x01, 0x4c, 0xd0, 0x5b, 0x1e, 0x48, 0xfe, 0x92, 0xb2, 0xd6, 0xd1, 0xe6, 0x6f, 0x07, 0x30, 0x68, 0x18, 0x8e, 0x48, 0xb3, 0xe1, 0x26, 0x20, 0x4a } },
            { "OTHER",        /* random */ { 0x78, 0x47, 0x51, 0xdd, 0xe0, 0xdd, 0x5f, 0xb9, 0x68, 0xfc, 0x77, 0x81, 0x65, 0xb9, 0xfb, 0xcc, 0xb8, 0x7a, 0xe9, 0xf7, 0x42, 0x71, 0xa4, 0x02, 0xef, 0x4c, 0x2a, 0x7e, 0x6d, 0xa0, 0xab, 0x4f, 0xc0, 0xc3, 0x47, 0xd2, 0x0b, 0x02, 0x13, 0xba, 0x38, 0x95, 0x3d, 0xcd, 0x3e, 0x2b, 0x92, 0x3f, 0x06, 0x3e, 0xab, 0xd5, 0x7a, 0x0c, 0xd7, 0x63, 0x17, 0x20, 0x1e, 0xbe, 0xbb, 0x58, 0x29, 0xc5, 0xc0, 0xd1, 0x67, 0xec, 0xf7, 0x64, 0xf4, 0x9c, 0xf6, 0xc1, 0x45, 0xf5, 0xae, 0x5a, 0x80, 0xd0, 0xde, 0xeb, 0x73, 0x32, 0x1e, 0x7b, 0x1a, 0x58, 0x4a, 0xbb, 0x7d, 0x5d, 0x54, 0xf3, 0xc7, 0x7d, 0xdd, 0xa9, 0xcd, 0x4d, 0x08, 0xf8, 0x16, 0x6d, 0xb6, 0x8a, 0x8e, 0xf5, 0x9f, 0xcc, 0x39, 0xb0, 0x8e, 0xa5, 0x77, 0x64, 0x44, 0x93, 0x37, 0x44, 0xc3, 0xc3, 0x5b, 0x41, 0x29, 0x94, 0xde, 0x76, 0x57, 0x95, 0x5e, 0xcd, 0x16, 0x6d, 0x02, 0xa8, 0x18, 0x90, 0xf3, 0x7e, 0x69, 0x34, 0x3a, 0xc2, 0xc3, 0x94, 0x2a, 0xcb, 0x3a, 0x01, 0x43, 0x70, 0xc0, 0x52, 0x0a, 0x00, 0xf2, 0x23, 0x67, 0x68, 0xde, 0x97, 0xf1, 0x3f, 0x8c, 0xbb, 0x19, 0x9f, 0x5b, 0xb4, 0x60, 0x67, 0xb7, 0x61, 0x61, 0x75, 0x33, 0x98, 0xff, 0xf0, 0xee, 0x64, 0x16, 0xcb, 0x29, 0xe8, 0x7f, 0x1d, 0x95, 0x3a, 0xfc, 0xec, 0x34, 0xe3, 0x79, 0xf6, 0x11, 0x98, 0x39, 0x18, 0x35, 0xba, 0xed, 0x14, 0x80, 0x6b, 0x37, 0x43, 0xb4, 0x09, 0x8f, 0x78, 0xe8, 0x31, 0x98, 0x8d, 0x82, 0xf9, 0x0c, 0xc8, 0xb9, 0x64, 0x9e, 0x6d, 0xd9, 0x50, 0x97, 0x94, 0x8e, 0x1a, 0xd7, 0xa2, 0x9d, 0x91, 0x36, 0xcd, 0x67, 0x19, 0xba, 0x32, 0xee, 0x29, 0x96, 0x02, 0x03, 0x87, 0xe7, 0x71, 0xea, 0xff, 0xe2, 0x93, 0x48, 0x32, 0xa6, 0x3b } },
            { "OTHER",        /*   "    */ { 0x73, 0x60, 0x3c, 0xa1, 0x81, 0xc7, 0xaa, 0x2d, 0x1f, 0x2e, 0x5a, 0x43, 0x11, 0x6f, 0x14, 0x1c, 0x6f, 0x9e, 0x04, 0xd4, 0x6b, 0xd3, 0xe9, 0x0d } },
            { "UBX-MON-HW2",               { 0xb5, 0x62, 0x0a, 0x0b, 0x1c, 0x00, 0x0c, 0x9e, 0x0c, 0x91, 0x00, 0x8a, 0xa9, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x8e } },
            { "SPARTN-HPAC-GLO",           { 0x73, 0x02, 0x58, 0xea, 0x18, 0xb9, 0xa1, 0x8f, 0xc0, 0x5b, 0x19, 0x88, 0xda, 0x72, 0xd2, 0x47, 0xb4, 0xf6, 0x0b, 0x58, 0x9a, 0x57, 0x9e, 0x28, 0xb3, 0x29, 0x13, 0xdd, 0xad, 0x03, 0x18, 0x80, 0xbe, 0xdf, 0xcd, 0x67, 0xf9, 0xae, 0x17, 0xbe, 0x9c, 0x53, 0x38, 0xed, 0x41, 0xf0, 0xc2, 0xd7, 0xca, 0x77, 0x31, 0x3d, 0xad, 0xa2, 0xb5, 0x18, 0x53, 0x64, 0xa4, 0xc1, 0xf0, 0x16, 0x53, 0xa5, 0x1e, 0x76, 0xa9, 0x37, 0x97, 0x52, 0x54, 0x47, 0xed, 0x41, 0x73, 0xe1, 0x70, 0x63, 0x89, 0x30, 0x29, 0x77, 0x1a, 0x39, 0x9d, 0x01, 0xb2, 0x02, 0x65, 0x6f, 0x4b, 0x75, 0x6f, 0x01, 0x01, 0xf0, 0x21, 0x5a, 0x4e, 0xc6, 0x2d, 0x2a, 0xa3, 0x9f, 0x3a, 0x08, 0x03, 0x93, 0x2d, 0x1e, 0x82, 0x94, 0xe9, 0x67, 0xb3, 0xdb, 0xd7, 0x7e, 0xbd, 0x49, 0x5a, 0x46, 0xe5, 0x03, 0xe8, 0x9e, 0x7a, 0xee, 0xba, 0x78, 0x6c, 0x12, 0x71, 0xb1, 0xf7, 0xc7, 0xfb, 0xc5, 0x65, 0xa7, 0xa8, 0x83, 0xf8, 0xb9, 0x9b, 0x83, 0x08, 0x29, 0xe6, 0x84, 0xf5, 0x6f, 0x8d, 0xb2, 0x01, 0x74, 0xed, 0x27, 0xc7, 0x57, 0xc9, 0x41, 0x63, 0x8e, 0xb5, 0x7c, 0x6f, 0xfa, 0x1f, 0xfa, 0xee, 0xfc, 0x17, 0xf9, 0x9b, 0x60, 0xa4, 0x16, 0x6c, 0xa1, 0x3e, 0xb7, 0xe2, 0x16, 0xc6, 0xd7, 0x24, 0xd2, 0x06, 0xc6, 0x9a, 0xb2 } },
            { "UBX-NAV-COV",               { 0xb5, 0x62, 0x01, 0x36, 0x40, 0x00, 0xb8, 0xfa, 0x43, 0x13, 0x00, 0x01, 0x01, 0x00, 0x32, 0x30, 0x19, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x2e, 0x8e, 0x69, 0x38, 0x88, 0x21, 0xad, 0xb6, 0x08, 0xd0, 0xf5, 0x37, 0x6d, 0x9e, 0x00, 0x38, 0x3b, 0xf0, 0xc3, 0xb5, 0x96, 0x61, 0x52, 0x39, 0xa9, 0x3c, 0x91, 0x3b, 0x58, 0x71, 0xe4, 0xb8, 0xb0, 0xc8, 0xb1, 0x39, 0x32, 0xfd, 0x05, 0x3b, 0x3c, 0xb1, 0x01, 0xb9, 0x3a, 0xe5, 0x8f, 0x3b, 0x47, 0x29 } },
            { "FP_B-MEASUREMENTS",         { 0x66, 0x21, 0xd1, 0x07, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xe2, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0xe3, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xe4, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x00, 0x4e, 0x61, 0xbc, 0x00, 0x26, 0x54, 0xaa, 0x34 } }
        }, {
            { "OTHER",       /* partial */ { 0xb5, 0x62, 0x01, 0x35, 0x84, 0x02, 0xb8, 0xfa, 0x43, 0x13, 0x01, 0x35, 0x00, 0x00, 0x00, 0x01, 0x27, 0x07, 0x00, 0x01, 0xf2, 0xff, 0x17, 0x19, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x04, 0x1c, 0x01, 0x00, 0x00, 0x17, 0x19, 0x00, 0x00, 0x00, 0x08, 0x2e, 0x3e, 0x2e, 0x01, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x0a, 0x31, 0x40, 0x5f, 0x00, 0x05, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x0f, 0x00, 0x02, 0x18, 0x00, 0x00, 0x00, 0x11, 0x1a, 0x00, 0x00, 0x00, 0x10, 0x29, 0x23, 0xc1, 0x00, 0xfa, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x12, 0x29, 0x0a, 0x46, 0x00, 0xec, 0xff, 0x17, 0x19, 0x00, 0x00, 0x00, 0x15, 0x2b, 0x21, 0x09, 0x01, 0xfd, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x17, 0x2c, 0x25, 0x35, 0x00, 0xfa, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x1a, 0x09, 0x05, 0xaf, 0x00, 0x00, 0x00, 0x13, 0x19, 0x00, 0x00, 0x00, 0x1b, 0x2f, 0x50, 0x78, 0x00, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x00, 0x1e, 0x26, 0x04, 0x3e, 0x01, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x00, 0x20, 0x27, 0x0a, 0x83, 0x00, 0x00, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x01, 0x7b, 0x27, 0x1f, 0x96, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x01, 0x7f, 0x1f, 0x14, 0x7d, 0x00, 0x00, 0x00, 0x07, 0x1a, 0x00, 0x00, 0x01, 0x80, 0x00, 0x02, 0x66, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x88, 0x29, 0x23, 0xb9, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x02, 0x01, 0x2c, 0x2f, 0xec, 0x00, 0x05, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x03, 0x25, 0x07, 0x1b, 0x00, 0x00, 0x00, 0x17, 0x19, 0x00, 0x00, 0x02, 0x07, 0x26, 0x10, 0x7f, 0x00, 0xe1, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x02, 0x08 } },
            { "OTHER",       /*    "    */ { 0x29, 0x17, 0x49, 0x00, 0xff, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x0d, 0x2a, 0x27, 0x43, 0x00, 0x0b, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x15, 0x26, 0x14, 0xbb, 0x00, 0xfb, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x1a, 0x2d, 0x4d, 0x39, 0x01, 0x02, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x1f, 0x2a, 0x1e, 0x35, 0x01, 0x07, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x02, 0x21, 0x28, 0x1e, 0x08, 0x01, 0x01, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x02, 0x00, 0x02, 0x64, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x05, 0x00, 0x12, 0x78, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x08, 0x20, 0x03, 0x2e, 0x00, 0x00, 0x00, 0x17, 0x1a, 0x00, 0x00, 0x03, 0x0d, 0x25, 0x0e, 0x31, 0x00, 0x07, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x13, 0x00, 0x07, 0xb6, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x14, 0x2d, 0x28, 0x8f, 0x00, 0xf7, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x03, 0x18, 0x00, 0x01, 0x55, 0x01, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x1a, 0x00, 0x13, 0x2c, 0x01, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x1d, 0x2f, 0x4c, 0x3f, 0x01, 0x03, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x1e, 0x2d, 0x2a, 0x60, 0x00, 0xfd, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x20, 0x2d, 0x27, 0x43, 0x00, 0x04, 0x00, 0x5f, 0x19, 0x32, 0x00, 0x03, 0x23, 0x27, 0x16, 0x20, 0x01, 0x00, 0x00, 0x27, 0x1a, 0x00, 0x00, 0x03, 0x27, 0x00, 0x03, 0x43, 0x00, 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x03, 0x29, 0x00, 0x04, 0x1c, 0x00, 0x00, 0x00, 0x10, 0x19, 0x00, 0x00, 0x03, 0x2d, 0x28, 0x14, 0xf5, 0x00, 0xf9, 0xff, 0x1f, 0x19, 0x00, 0x00, 0x03, 0x3c, 0x00, 0x04, 0x67, 0x00 } },
            { "OTHER",       /*    "    */ { 0x00, 0x00, 0x10, 0x12, 0x00, 0x00, 0x05, 0x03, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x26, 0x15, 0x99, 0x00, 0xea, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x07, 0x2b, 0x1b, 0x24, 0x00, 0xf6, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x08, 0x2d, 0x2c, 0x5f, 0x00, 0xeb, 0xff, 0x5f, 0x19, 0x32, 0x00, 0x06, 0x0d, 0x1c, 0x0b, 0xd4, 0x00, 0xe1, 0xff, 0x5f, 0x19, 0x12, 0x00, 0x06, 0x0e } },
        }));  // clang-format on

    const ParserStats stats = parser.GetStats();
    // clang-format off
    EXPECT_EQ(stats.n_msgs_,      (uint32_t)27);
    EXPECT_EQ(stats.s_msgs_,    (uint32_t)2837);
    EXPECT_EQ(stats.n_fpa_,        (uint32_t)2);
    EXPECT_EQ(stats.s_fpa_,      (uint32_t)213);
    EXPECT_EQ(stats.n_fpb_,        (uint32_t)1);
    EXPECT_EQ(stats.s_fpb_,      (uint32_t)104);
    EXPECT_EQ(stats.n_nmea_,       (uint32_t)2);
    EXPECT_EQ(stats.s_nmea_,     (uint32_t)152);
    EXPECT_EQ(stats.n_ubx_,        (uint32_t)4);
    EXPECT_EQ(stats.s_ubx_,      (uint32_t)200);
    EXPECT_EQ(stats.n_rtcm3_,      (uint32_t)3);
    EXPECT_EQ(stats.s_rtcm3_,    (uint32_t)375);
    EXPECT_EQ(stats.n_novb_,       (uint32_t)3);
    EXPECT_EQ(stats.s_novb_,     (uint32_t)304);
    EXPECT_EQ(stats.n_spartn_,     (uint32_t)4);
    EXPECT_EQ(stats.s_spartn_,   (uint32_t)527);
    EXPECT_EQ(stats.n_other_,      (uint32_t)8);
    EXPECT_EQ(stats.s_other_,    (uint32_t)962);
    // clang-format on
}

// ---------------------------------------------------------------------------------------------------------------------

TEST_F(ParserTest, EmptyNmeaPayload)
{
    {
        Parser parser;
        const char* str = "$GPGGA*56\r\n";
        EXPECT_TRUE(parser.Add((const uint8_t*)str, strlen(str)));
        ParserMsg msg;
        EXPECT_TRUE(parser.Process(msg));
        EXPECT_EQ(msg.name_, "NMEA-GP-GGA");
    }
    {
        Parser parser;
        const char* str = "$FP,VERSION*60\r\n";
        EXPECT_TRUE(parser.Add((const uint8_t*)str, strlen(str)));
        ParserMsg msg;
        EXPECT_TRUE(parser.Process(msg));
        EXPECT_EQ(msg.name_, "FP_A-VERSION");
    }
    {
        Parser parser;
        const char* str = "$FP,VERSION,*4C\r\n";
        EXPECT_TRUE(parser.Add((const uint8_t*)str, strlen(str)));
        ParserMsg msg;
        EXPECT_TRUE(parser.Process(msg));
        EXPECT_EQ(msg.name_, "FP_A-VERSION");
    }
}

/* ****************************************************************************************************************** */
}  // namespace

int main(int argc, char** argv)
{
    testing::InitGoogleTest(&argc, argv);
    auto level = fpsdk::common::logging::LoggingLevel::WARNING;
    for (int ix = 0; ix < argc; ix++) {
        if ((argv[ix][0] == '-') && argv[ix][1] == 'v') {
            level++;
        }
    }
    fpsdk::common::logging::LoggingSetParams(level);
    return RUN_ALL_TESTS();
}
